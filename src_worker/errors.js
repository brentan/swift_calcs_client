var fix_message = function(message) {
	message = message.replace(/:.*:[ ]*/,'');
	var tester = [
		{ sequence: /^.*Expecting an expression, not a function.*$/i, update: 'Expecting an expression, not a function.  For example, to take the derivative of a function <i>f</i>, <i>df/dx</i> should instead be written as <i>d<b>f(x)</b>/dx</i>'},
		{ sequence: /^[\s]*sto.*not allowed!.*$/, update: 'Invalid Assignment.  The left side of the assignment should be a variable or function name, such as <i>x&#8802;</i> or <i>f(x)&#8802;</i>'},
    { sequence: /T_NUMBER/g, update: "Number or Decimal" },
    { sequence: /T_SYMBOL/g, update: "Letter or Symbol" },
    { sequence: /T_LITERAL/g, update: "Constant or Literal" },
    { sequence: /T_STRING/g, update: "String" },
    { sequence: /T_END_INPUT/g, update: "End of Input" },
    { sequence: /T_EXPRESSION/g, update: "Expression" },
    { sequence: /T_UNARY_OP/g, update: "Function or Operator" },
    { sequence: /T_OF/g, update: "Of Statement" },
    { sequence: /T_NOT/g, update: "Not Statement" },
    { sequence: /T_VIRGULE/g, update: "Comma" },
    { sequence: /T_AFFECT/g, update: "Definition or Assignment Operator (&#8801;)" },
    { sequence: /T_BEGIN_PAR/g, update: "Opening Parenthesis" },
    { sequence: /T_END_PAR/g, update: "Closing Parenthesis" },
    { sequence: /T_PLUS/g, update: "Plus Sign" },
    { sequence: /T_MOINS/g, update: "Minus Sign" },
    { sequence: /T_FOIS/g, update: "Multiplication" },
    { sequence: /T_DIV/g, update: "Division" },
    { sequence: /T_MOD/g, update: "Modulus Operator" },
    { sequence: /T_POW/g, update: "Power or Exponential" },
    { sequence: /T_QUOTE/g, update: "Apostrophe" },
    { sequence: /T_PRIME/g, update: "Apostrophe" },
    { sequence: /T_TEST_EQUAL/g, update: "Logical Operator (such as =, or >)" },
    { sequence: /T_EQUAL/g, update: "Equal Sign" },
    { sequence: /T_INTERVAL/g, update: "Interval Operator (&hellip;)" },
    { sequence: /T_AND_OP/g, update: "Logical 'And/Or'" },
    { sequence: /T_DOLLAR/g, update: "Dollar Sign" },
    { sequence: /T_INDEX_BEGIN/g, update: "Opening Bracket '['" },
    { sequence: /T_VECT_BEGIN/g, update: "Opening Bracket '['" },
    { sequence: /T_VECT_DISPATCH/g, update: "Bracket or Parenthesis" },
    { sequence: /T_VECT_END/g, update: "Closing Bracket ']'" },
    { sequence: /T_SEMI/g, update: "Semicolon" },
    { sequence: /T_DEUXPOINTS/g, update: "Colon" },
    { sequence: /T_DOUBLE_DEUX_POINTS/g, update: "Double Colon" },
    { sequence: /T_IF/g, update: "IF Statement" },
    { sequence: /T_ELIF/g, update: "ELSEIF Statement" },
    { sequence: /T_THEN/g, update: "THEN Statement" },
    { sequence: /T_ELSE/g, update: "ELSE Statement" },
    { sequence: /T_IFTE/g, update: "IF Statment" },
    { sequence: /T_SWITCH/g, update: "SWITCH Statement" },
    { sequence: /T_CASE/g, update: "CASE Statement" },
    { sequence: /T_DEFAULT/g, update: "DEFAULT Statement" },
    { sequence: /T_ENDCASE/g, update: "END Statement" },
    { sequence: /T_FOR/g, update: "FOR Statement" },
    { sequence: /T_FROM/g, update: "FROM Statement" },
    { sequence: /T_TO/g, update: "TO Statement" },
    { sequence: /T_DO/g, update: "DO Statement" },
    { sequence: /T_BY/g, update: "BY Statement" },
    { sequence: /T_WHILE/g, update: "WHILE Statement" },
    { sequence: /T_REPEAT/g, update: "REPEAT Statement" },
    { sequence: /T_UNTIL/g, update: "UNTIL Statement" },
    { sequence: /T_IN/g, update: "IN Statement" },
    { sequence: /T_START/g, update: "START Statement" },
    { sequence: /T_BREAK/g, update: "BREAK Statement" },
    { sequence: /T_CONTINUE/g, update: "CONTINUE Statement" },
    { sequence: /T_TRY/g, update: "TRY Statement" },
    { sequence: /T_CATCH/g, update: "CATCH Statement" },
    { sequence: /T_TRY_CATCH/g, update: "TRY/CATCH Statement" },
    { sequence: /T_RETURN/g, update: "RETURN Statement" },
    { sequence: /T_NULL/g, update: "Null Operator" },
    { sequence: /T_FACTORIAL/g, update: "Factorial '!'" },
    { sequence: /T_VECTOR_BEGIN/g, update: "Opening Bracket '['" },
    { sequence: /T_VECTOR_END/g, update: "Closing Bracket ']'" },
    { sequence: /T_MATRICE_BEGIN/g, update: "Opening Bracket '['" },
    { sequence: /T_MATRICE_END/g, update: "Closing Bracket ']'" },
    { sequence: /T_HELP/g, update: "Question Mark" },
    { sequence: /T_INTERROGATION/g, update: "Question Mark" },
    { sequence: /T_UNIT/g, update: "Underscore or Unit Operator" }
	];
	for(var k = 0; k < tester.length; k++) 
		message = message.replace(tester[k].sequence, tester[k].update);
	return message;
}
