/*
Setup the default configurations for mathquill
*/

window.MathquillSetup = function() {

	//Set configuration parameters
	MathQuill.config({
		spaceBehavesLikeTab: true,
		charsThatBreakOutOfSupSub: '$=<>',
		autoCommands: 'and or xor true false sqrt sum nthroot abs alpha beta gamma delta varepsilon epsilon zeta eta theta iota kappa lambda mu nu xi rho pi sigma tau upsilon phi chi psi omega Gamma Delta Theta Lambda Xi Pi Sigma Upsilon Phi Psi Omega',
		autocomplete: [],
		staticAutocomplete: ['acos','acosh','acot','asin','asinh','atan','atan2','atanh','ceil','comb','cos','cosh','cot','cross','csc','det','eigenvals','eigenvects','exp2trig','expand','factor','floor','log','log10','mean','median','nthroot','partfrac','perm','quartiles','rand','randnorm','rank','round','sec','simplify','sin','sinh','sqrt','stddev','tan','tanh','tcollect','texpand','tlin','trig2exp','variance'],
		unitList: [
			{ name: 'meter', symbol: 'm', prefix: true, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'foot', symbol: 'ft', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'gram', symbol: 'g', prefix: true, mksa: [1,0,1,0,0,0,0,0,0]},
			{ name: 'second', symbol: 's', prefix: true, mksa: [1,0,0,1,0,0,0,0,0]},
			{ name: 'ampere', symbol: 'A', prefix: true, mksa: [1,0,0,0,1,0,0,0,0]},
			{ name: 'kelvin', symbol: 'K', prefix: false, mksa: [1,0,0,0,0,1,0,0,0]},
			{ name: 'mole', symbol: 'mol', prefix: false, mksa: [1,0,0,0,0,0,1,0,0]},
			{ name: 'candela', symbol: 'cd', prefix: true, mksa: [1,0,0,0,0,0,0,1,0]},
			{ name: 'becquerel', symbol: 'Bq', prefix: true, mksa: [1,0,0,-1,0,0,0,0,0]},
			{ name: 'coulomb', symbol: 'C', prefix: true, mksa: [1,0,0,1,1,0,0,0,0]},
			{ name: 'farad', symbol: 'F', prefix: true, mksa: [1,-2,-1,4,2,0,0,0,0]},
			{ name: 'gray', symbol: 'Gy', prefix: true, mksa: [1,2,0,-2,0,0,0,0,0]},
			{ name: 'henry', symbol: 'H', prefix: true, mksa: [1,2,1,-2,-2,0,0,0,0]},
			{ name: 'hertz', symbol: 'Hz', prefix: true, mksa: [1,0,0,-1,0,0,0,0,0]},
			{ name: 'joule', symbol: 'J', prefix: true, mksa: [1,2,1,-2,0,0,0,0,0]},
			{ name: 'mho', symbol: 'mho', prefix: false, mksa: [1,-2,-1,3,2,0,0,0,0]},
			{ name: 'siemens', symbol: 'S', prefix: true, mksa: [1,-2,-1,3,2,0,0,0,0]},
			{ name: 'newton', symbol: 'N', prefix: true, mksa: [1,1,1,-2,0,0,0,0,0]},
			{ name: 'ohm', symbol: 'Ohm', prefix: true, mksa: [1,2,1,-3,-2,0,0,0,0]},
			{ name: 'pascal', symbol: 'Pa', prefix: true, mksa: [1,-1,1,-2,0,0,0,0,0]},
			{ name: 'radian', symbol: 'rad', prefix: false, mksa: [1,0,0,0,0,0,0,0,0]},
			{ name: 'degree', symbol: 'rad', prefix: false, mksa: [1,0,0,0,0,0,0,0,0]},
			{ name: 'sievert', symbol: 'Sv', prefix: true, mksa: [1,2,0,-2,0,0,0,0,0]},
			{ name: 'tesla', symbol: 'T', prefix: true, mksa: [1,0,1,-2,-1,0,0,0,0]},
			{ name: 'volt', symbol: 'V', prefix: true, mksa: [1,2,1,-3,-1,0,0,0,0]},
			{ name: 'watt', symbol: 'W', prefix: true, mksa: [1,2,1,-3,0,0,0,0,0]},
			{ name: 'weber', symbol: 'Wb', prefix: true, mksa: [1,2,1,-2,-1,0,0,0,0]},
			{ name: 'liter', symbol: 'l', prefix: true, mksa: [1,3,0,0,0,0,0,0,0]},
			{ name: 'are', symbol: 'a', prefix: false, mksa: [1,2,0,0,0,0,0,0,0]},
			{ name: 'acre', symbol: 'acre', prefix: false, mksa: [1,2,0,0,0,0,0,0,0]},
			{ name: 'arcminute', symbol: 'arcmin', prefix: false, mksa: [1,0,0,0,0,0,0,0,0]},
			{ name: 'arcsecond', symbol: 'arcs', prefix: false, mksa: [1,0,0,0,0,0,0,0,0]},
			{ name: 'atmosphere', symbol: 'atm', prefix: false, mksa: [1,-1,1,-2,0,0,0,0,0]},
			{ name: 'astronomical unit', symbol: 'au', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'angstrom', symbol: 'Angstrom', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'barn', symbol: 'b', prefix: false, mksa: [1,2,0,0,0,0,0,0,0]},
			{ name: 'bar', symbol: 'bar', prefix: false, mksa: [1,-1,1,-2,0,0,0,0,0]},
			{ name: 'millibar', symbol: 'mbar', prefix: false, mksa: [1,-1,1,-2,0,0,0,0,0]},
			{ name: 'barrel', symbol: 'bbl', prefix: false, mksa: [1,3,0,0,0,0,0,0,0]},
			{ name: 'Btu', symbol: 'Btu', prefix: false, mksa: [1,2,1,-2,0,0,0,0,0]},
			{ name: 'calorie', symbol: 'cal', prefix: false, mksa: [1,2,1,-2,0,0,0,0,0]},
			{ name: 'Calorie', symbol: 'kcal', prefix: false, mksa: [1,2,1,-2,0,0,0,0,0]},
			{ name: 'chain', symbol: 'chain', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'curie', symbol: 'Curie', prefix: true, mksa: [1,0,0,-1,0,0,0,0,0]},
			{ name: 'carat', symbol: 'ct', prefix: false, mksa: [1,0,1,0,0,0,0,0,0]},
			{ name: 'day', symbol: 'd', prefix: false, mksa: [1,0,0,1,0,0,0,0,0]},
			{ name: 'decibel', symbol: 'dB', prefix: false, mksa: [0,0,0,0,0,0,0,0,0]},
			{ name: 'dyne', symbol: 'dyn', prefix: false, mksa: [1,1,1,-2,0,0,0,0,0]},
			{ name: 'erg', symbol: 'erg', prefix: false, mksa: [1,2,1,-2,0,0,0,0,0]},
			{ name: 'electronVolt', symbol: 'eV', prefix: false, mksa: [1,2,1,-2,0,0,0,0,0]},
			{ name: 'fathom', symbol: 'fath', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'footBoard', symbol: 'fbm', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'fermi', symbol: 'fermi', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'flam', symbol: 'flam', prefix: false, mksa: [1,-2,0,0,0,0,0,1,0]},
			{ name: 'gallon', symbol: 'gal', prefix: false, mksa: [1,3,0,0,0,0,0,0,0]},
			{ name: 'gallon (imperial)', symbol: 'galUK', prefix: false, mksa: [1,3,0,0,0,0,0,0,0]},
			{ name: 'gramforce', symbol: 'gf', prefix: false, mksa: [1,1,1,-2,0,0,0,0,0]},
			{ name: 'kilogramforce', symbol: 'kgf', prefix: false, mksa: [1,1,1,-2,0,0,0,0,0]},
			{ name: 'gradian', symbol: 'grad', prefix: false, mksa: [1,0,0,0,0,0,0,0,0]}, 
			{ name: 'hour', symbol: 'h', prefix: false, mksa: [1,0,0,1,0,0,0,0,0]},
			{ name: 'hectare', symbol: 'ha', prefix: false, mksa: [1,2,0,0,0,0,0,0,0]},
			{ name: 'horsepower', symbol: 'hp', prefix: false, mksa: [1,2,1,-3,0,0,0,0,0]},
			{ name: 'inch', symbol: 'in', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'inches water', symbol: 'inH2O', prefix: false, mksa: [1,-1,1,-2,0,0,0,0,0]},
			{ name: 'inches mercury', symbol: 'inHg', prefix: false, mksa: [1,-1,1,-2,0,0,0,0,0]},
			{ name: 'kip', symbol: 'kip', prefix: false, mksa: [1,1,1,-2,0,0,0,0,0]},
			{ name: 'knot', symbol: 'knot', prefix: false, mksa: [1,1,0,-1,0,0,0,0,0]},
			{ name: 'kilometers per hour', symbol: 'kph', prefix: false, mksa: [1,1,0,-1,0,0,0,0,0]},
			{ name: 'ksi', symbol: 'ksi', prefix: false, mksa: [1,-1,1,-2,0,0,0,0,0]},
			{ name: 'pound', symbol: 'lb', prefix: false, mksa: [1,0,1,0,0,0,0,0,0]},
			{ name: 'poundForce', symbol: 'lbf', prefix: false, mksa: [1,1,1,-2,0,0,0,0,0]},
			{ name: 'poundMole', symbol: 'lbm', prefix: false, mksa: [1,0,0,0,0,0,1,0,0]},
			{ name: 'mile', symbol: 'mi', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'minute', symbol: 'mn', prefix: false, mksa: [1,0,0,1,0,0,0,0,0]},
			{ name: 'millimeter mercury', symbol: 'mmHg', prefix: false, mksa: [1,-1,1,-2,0,0,0,0,0]},
			{ name: 'miles per hour', symbol: 'mph', prefix: false, mksa: [1,1,0,-1,0,0,0,0,0]},
			{ name: 'nautical mile', symbol: 'nmi', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'ounce', symbol: 'oz', prefix: false, mksa: [1,0,1,0,0,0,0,0,0]},
			{ name: 'ounce (imperial)', symbol: 'ozUK', prefix: false, mksa: [1,0,1,0,0,0,0,0,0]},
			{ name: 'fluid ounce', symbol: 'ozfl', prefix: false, mksa: [1,3,0,0,0,0,0,0,0]},
			{ name: 'parsec', symbol: 'pc', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'poundal', symbol: 'pdl', prefix: false, mksa: [1,1,1,-2,0,0,0,0,0]},
			{ name: 'pounds per square inch', symbol: 'psi', prefix: false, mksa: [1,-1,1,-2,0,0,0,0,0]},
			{ name: 'pint', symbol: 'pt', prefix: false, mksa: [1,3,0,0,0,0,0,0,0]},
			{ name: 'pint (imperial)', symbol: 'ptUK', prefix: false, mksa: [1,3,0,0,0,0,0,0,0]},
			{ name: 'quart', symbol: 'qt', prefix: false, mksa: [1,3,0,0,0,0,0,0,0]},
			{ name: 'rod', symbol: 'rod', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'revolutions per minute', symbol: 'rpm', prefix: false, mksa: [1,0,0,-1,0,0,0,0,0]},
			{ name: 'slug', symbol: 'slug', prefix: false, mksa: [1,0,1,0,0,0,0,0,0]},
			{ name: 'tablespoon', symbol: 'tbsp', prefix: false, mksa: [1,3,0,0,0,0,0,0,0]},
			{ name: 'therm', symbol: 'therm', prefix: false, mksa: [1,2,1,-2,0,0,0,0,0]},
			{ name: 'ton', symbol: 'ton', prefix: false, mksa: [1,0,1,0,0,0,0,0,0]},
			{ name: 'ton (imperial)', symbol: 'tonUK', prefix: false, mksa: [1,0,1,0,0,0,0,0,0]},
			{ name: 'ton (metric)', symbol: 't', prefix: false, mksa: [1,0,1,0,0,0,0,0,0]},
			{ name: 'torr', symbol: 'torr', prefix: true, mksa: [1,-1,1,-2,0,0,0,0,0]},
			{ name: 'teaspoon', symbol: 'tsp', prefix: false, mksa: [1,3,0,0,0,0,0,0,0]},
			{ name: 'yard', symbol: 'yd', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'year', symbol: 'yr', prefix: false, mksa: [1,0,0,1,0,0,0,0,0]},
			{ name: 'rankine', symbol: 'Rankine', prefix: false, mksa: [1,0,0,0,0,1,0,0,0]},
			{ name: 'lightyear', symbol: 'lyr', prefix: false, mksa: [1,1,0,0,0,0,0,0,0]},
			{ name: 'watthour', symbol: 'Wh', prefix: true, mksa: [1,2,1,-2,0,0,0,0,0]},
			{ name: 'barrel of oil equivalent', symbol: 'boe', prefix: false, mksa: [1,2,1,-2,0,0,0,0,0]},
			{ name: 'Pounds per Cubic Foot', symbol: 'pcf', prefix: false, mksa: [1,-3,1,0,0,0,0,0,0]}
		],
		helpList: { // Helplist used to populate helpful popups for functions.  text in <> will be shown as code, text between || is added to the explanation class.  
			Ci:"<<Ci(1.0)>>\nCosine integral int(cos(t)/t,t=-inf..x)\n|Also See: Ei,Si|",
			Det:"<<Det([[1,2],[3,4]])>>\nDeterminant of a square matrix M, without evaluation.\n|Also See: det|",
			Dirac:"<<Dirac(1)>>\nFunction derivative of Heaviside.\n|Also See: Heaviside|",
			Ei:"<<Ei(1.0)>>\nExponential integral int(exp(t)/t,t=-inf..x)\n|Also See: Si,Ci|",
			Factor:"<<Factor(x^4-1)>>\nFactorizes a polynomial without evaluation.\n|Also See: factor,ifactor,normal|",
			Gcd:"<<Gcd(45,75)>>\nReturns the greatest common divisor of 2 polynomials or of 2 integers without evaluation\n|Also See: gcd|",
			Heaviside:"<<Heaviside(1)>>\nFunction equal to 0 if x<0 and 1 if x>=0.\n|Also See: Dirac|",
			Int:"<<Int(sin(x))>>\nReturns the primitive or the calculus of the integrate (bounds a and b) without evaluation.\n|Also See: int|",
			Inverse:"<<Inverse(9/5)>>\nReturns the reciprocal or the matrix inverse without evaluation.\n|Also See: inv|",
			JordanBlock:"<<JordanBlock(7,3)>>\nReturns a matrix n*n with a on the diagonal ,1 above and 0 everywhere else.\n|Also See: jordan|",
			LQ:"<<LQ([[1,2],[3,4]])>>\nFor a numerical matrix A, returns L a lower matrix, Q an orthogonal matrix and P a permutation matrix such that P*A=L*Q.\n|Also See: lu,QR|",
			LSQ:"<<LSQ([[1,2],[3,4]],[5,11])>>\nReturns the vector (resp matrix) X which is the minimum of the euclidean (resp Frobenius) norm of A*X-B corresponding to the linear system A*X=B when B is a vector (resp matrix).\n|Also See: lu,QR|",
			LU:"<<LU([[1,2],[3,4]],L,U,P)>>\nFor a numerical matrix A, store in L a lower matrix, in U a upper matrix and in P a permutation matrix such that P*A=L*U.\n|Also See: lu,QR|",
			NORMALD:"<<normald(1)>>\nReturns the density of probability of the Normal law (mu is the mean and sigma the standard deviation).\n|Also See: normal_cdf,normal_icdf,randvector,ranm|",
			Phi:"<<euler(11)>>\nEuler's function (euler(n)=card({p<n,gcd(n,p)=1})).\n|Also See: gcd|",
			QR:"<<QR([[1,2],[3,4]],Q,R)>>\nFor a numerical matrix A, store in Q a orthogonal matrix and in U a lower matrix such that A=Q*R [exchanging by 0 the elements such that abs(el)<eps].\n|Also See: qr,LU|",
			Quo:"<<Quo([1,2,3,4],[-1,2])>>\nReturns the euclidean quotient of 2 polynomials without evaluation\n|Also See: quo,quorem|",
			REDIM:"<<redim([[1,2,3],[3,-9,6],[4,5,6]],1,2)>>\nShrink or enlarge with 0 a matrix (or vector) according to the new n1 and n2 dimensions\n|Also See: replace|",
			REPLACE:"<<replace([[1,2,3],[3,-9,6],[4,5,6]],[1,0],[[7,8],[9,0]])>>\nReplace part of matrix A from indices n1,n2 with the values of matrix B.\n|Also See: redim|",
			RandSeed:"<<RandSeed(321)>>\nInitializes random numbers.\n|Also See: srand|",
			Rem:"<<Rem([1,2,3,4],[-1,2])>>\nReturns the euclidean remainder of 2 polynomials without evaluation\n|Also See: rem,quorem|",
			Resultant:"<<Resultant(x^3+x+1,x^2-x-2,x)>>\nInert form of resultant for modular computation (irem/mod)\n|Also See: resultant|",
			Rref:"<<Rref([[3,1,-2],[3,2,2]])>>\nReturns the row reduction to echelon form of AX=b (M=A|b) without evaluation.\n|Also See: rref|",
			SCHUR:"<<SCHUR([[1,2,3],[4,5,6],[7,8,1]])>>\nMatrix reduction to Hessenberg form. Returns [P,B] such that B=inv(P)*A*P:SCHUR(A)=hessenberg(A,-1).\n|Also See: hessenberg|",
			SVD:"<<SVD([[1,4],[4,1]])>>\nSingular Value Decomposition for a numerical real matrix A, returns U an orthogonal matrix, S the vector of singular values of A and Q an orthogonal matrix and S the vector of singular values such that A=U*diag(S)*trn(Q)\n|Also See: lu,svd|",
			SVL:"<<SVL([[1,4],[4,1]])>>\nFor a numerical real matrix A returns the singular value vector i.e. sqrt(eigenvals(A*trn(A))).\n|Also See: lu,svd|",
			Si:"<<Si(1.0)>>\nSine integral int(sin(t)/t,t=0..x)\n|Also See: Ei,Ci|",
			SortA:"<<SortA([3,4,2])>>\nSorts the lists with increasing order.\n|Also See: SortD,sort|",
			SortD:"<<SortD([3,4,2])>>\nSorts the lists with decreasing order.\n|Also See: SortA,sort|",
			UTPC:"<<UTPC(2,6.1)>>\nReturns the probability that a Chisquare random variable is greater than x0 (n is the number of degrees of freedom).\n|Also See: chisquare_cdf,chisquare_icdf|",
			UTPF:"<<UTPF(4,10,3.5)>>\nReturns the probability that a Fisher-Snedecor random variable is greater than x0 (n and d are the numbers of degrees of freedom).\n|Also See: fisher_cdf,fisher_icdf|",
			UTPN:"<<UTPN(1.96)>>\nReturns the probability that a Normal random variable is greater than x0 (mu is the mean and v the variance).\n|Also See: normal_cdf,normal_icdf|",
			UTPT:"<<UTPT(3,2.35)>>\nReturns the probability that a Student random variable is greater than x0 (n is the number of degrees of freedom).\n|Also See: student_cdf,student_icdf|",
			VAS:"<<VAS(x^3-7*x+7)>>\nReturns a list of intervals containing the real roots of P. Vincent-Akritas-Strzebonski's method (VAS) is used.\n|Also See: VAS_positive,sturmab,realroot|",
			VAS_positive:"<<VAS_positive(x^3-7*x+7)>>\nReturns a list of intervals containing the positive roots of P. Vincent-Akritas-Strzebonski's method (VAS) is used.\n|Also See: poslbdLMQ,posubLMQ,VAS,realroot|",
			Zeta:"<<Zeta(2)>>\nReturns if a>1 sum(1/n^a,n,1,+infinity)\n|Also See: sum|",
			a2q:"<<a2q([[1,2],[4,4]],[x,y])>>\na2q(A,X)=the quadratic form q associated to A, X=vector of variables.\n|Also See: q2a|",
			abcuv:"<<abcuv(x^2+2*x+1,x^2-1,x+1)>>\nReturns [u,v] such as au+bv=c for 3 polynomials a,b,c\n|Also See: egcd,iabcuv|",
			abs:"<<abs(-4)>>\nReturns the absolute value or the norm of its argument.\n|Also See: arg|",
			abscissa:"<<abscissa(point(1+2*i))>>\nReturns the abscissa of a point or a vector.\n|Also See: ordinate,affix,cote,coordinates|",
			acos:"<<acos(0)>>\nArccosine\n|Also See: cos,acosh|",
			acos2asin:"<<acos2asin(acos(x)+asin(x))>>\nReplaces arccos(x) by pi/2-arcsin(x) in the argument\n|Also See: acos2atan|",
			acos2atan:"<<acos2atan(2*acos(x))>>\nReplaces arccos(x) by pi/2-arctan(x/sqrt(1-x^2)) in the argument\n|Also See: acos2asin|",
			acosh:"<<acosh(1)>>\nHyperbolic arccosine.\n|Also See: cosh,acos|",
			acot:"<<acot(0)>>\nArccotangent.\n|Also See: atan,arccos|",
			acsc:"<<acsc(1)>>\nArccosecant: acsc(x)=asin(1/x).\n|Also See: asin,csc|",
			add:"<<sum(1/n^2,n,1,17)>>\nDiscrete sum (with 2 or 4 arguments return then sum from a to b if a<=b or of the opposite of the sum from b+1 to a-1 if a>b+1 or 0 if a=b+1) or the discrete primitive or sum of the elements of a list or a sequence\n|Also See: +|",
			adjoint_matrix:"<<adjoint_matrix([[1,i],[2,3]])>>\nReturns the characteristic polynomial of A and the comatrix of A-xI.\n|Also See: pcar|",
			affix:"<<affix(point(i))>>\nComplex number equal to the affix of a point or of a vector.\n|Also See: point,vector|",
			algsubs:"<<algsubs(x^2=u,1+x^2+x^4)>>\nSubstitutes in the expression Xpr, the algebraic expression Xpr1 by the algebraic expression Xpr2.\n|Also See: subst,subs|",
			algvar:"<<algvar(sqrt(x)+y)>>\nList of the variables by ascending algebraic extension order.\n|Also See: lvar,lname|",
			alog10:"<<alog10(3)>>\nFunction x->10^x.\n|Also See: log10|",
			append:"<<append([1,2,3],4)>>\nAppend an element to a list.\n|Also See: concat,prepend|",
			apply:"<<apply(x->>x^3,[1,2,3])>x+1,[[1,2,3],[1,2,3]],matrix)>\nApply the function f at the elements of the list l (option matrix for a matrix).\n|Also See: map,unapply,matrix|",
			approx:"<<evalf(2/3)>>\nNumerical evaluation of the first argument (we can give the number of digits as second argument)\n|Also See: evalb,eval|",
			arccos:"<<acos(0)>>\nArccosine\n|Also See: cos,acosh|",
			arccosh:"<<acosh(1)>>\nHyperbolic arccosine.\n|Also See: cosh,acos|",
			arcsin:"<<asin(0)>>\nArcsine.\n|Also See: sin|",
			arcsinh:"<<asinh(0)>>\nHyperbolic arcsine.\n|Also See: sinh,asin|",
			arctan:"<<atan(0)>>\nArctangent.\n|Also See: tan,atanh|",
			arctanh:"<<atan(0)>>\nHyperbolic arctangent.\n|Also See: tan|",
			arg:"<<arg(1+i)>>\nReturns the argument of a complex number.\n|Also See: abs|",
			asec:"<<asec(1)>>\nArcsecant: asec(x)=acos(1/x).\n|Also See: acos,sec|",
			asin:"<<asin(0)>>\nArcsine.\n|Also See: sin|",
			asin2acos:"<<asin2acos(acos(x)+asin(x))>>\nReplaces arcsin(x) by pi/2-arccos(x) in the argument\n|Also See: asin2atan|",
			asin2atan:"<<asin2atan(2*asin(x))>>\nReplaces arcsin(x) by arctan(x/sqrt(1-x^2)) in the argument\n|Also See: asin2acos|",
			asinh:"<<asinh(0)>>\nHyperbolic arcsine.\n|Also See: sinh,asin|",
			at:"<<at([10,11,12],1)>>\nat(l,j) (or at(m,[j,k])) is the element of the list l (or matrix m) for index=j (or for index j,k).\n|Also See: of|",
			atan:"<<atan(20)>>\nArctangent.\n|Also See: tan,atanh,atan2|",
			atan2:"<<atan2(20,62)>>\nArctangent of the quotient of the arguments.  The y coordinate is first, and the x coordinate is second (equivalent to atan(y/x) is atan2(y,x).  This function, unlike atan, has full sign information for both x and y and will return the angle corresponding to the correct quadrant for x and y.\n|Also See: tan,atanh,atan|",
			atan2acos:"<<atan2acos(atan(x))>>\nReplaces arctan(x) by pi/2-arccos(x/sqrt(1+x^2)) in the argument",
			atan2asin:"<<atan2asin(atan(x))>>\nReplaces arctan(x) by arcsin(x/sqrt(1+x^2))in the argument.",
			atanh:"<<atan(0)>>\nHyperbolic arctangent.\n|Also See: tan|",
			atrig2ln:"<<atrig2ln(atan(x))>>\nRewrites the expression containing inverse trigonometric functions with logarithmic functions.\n|Also See: trig2exp,exp2trig|",
			avgRC:"<<avgRC(f(x),x,h)>>\nReturns (Xpr(var+h)-Xpr(var))/h (by default h=0.001).\n|Also See: nDeriv|",
			back:"<<back(1,2,3)>>\nReturns the last element of a vector or a sequence or a string.\n|Also See: inter,head,mid,left,right|",
			base:"<< convert(123,base,8)>>\nOption for convert : convert(p,base,b)= [a0,a1,..an] or convert([a0,a1,..an],base,b)=p with p=a0+a1*b+....an*b^(n-1).\n|Also See: convert,horner,revlist|",
			bernoulli:"<<bernoulli(6)>>\nbernoulli(n) is the n-th number of Bernoulli.",
			Beta: "<<Beta(3,5)>>\nBeta(a,b)=int(t^(a-1)*(1-t)^(b-1),t=0..1), Beta(a,b,p)=int(t^(a-1)*(1-t)^(b-1),t=0..p), Beta(a,b,p,1)=Beta(a,b,p)/Beta(a,b).(Beta(x,y) returns Gamma(x)*Gamma(y)/Gamma(x+y))",
			betad:"<<betad(2.2,1.5,0.8)>>\nReturns the density of probability of the Beta law (=Gamma(a+b)*x^(a-1)*(1-x)^(b-1)/(Gamma(a)*Gamma(b))).\n|Also See: betad_cdf,betad_icdf|",
			betad_cdf:"<<betad_cdf(2,1,0.2)>>\nReturns the probability that a Beta random variable (with a and b as parameters) is lower than x0 or between x0 and y0.\n|Also See: betad,betad_icdf|",
			betad_icdf:"<<betad_icdf(2,1,0.95)>>\nReturns h such that the probability that a Gamma random variable is lower than h is p (0<=p<=1).\n|Also See: betad_cdf,betad|",
			bezier:"<<bezier(1,1+i,2+i,3-i,plot)>>\nBezier curve defined by control points.\n|Also See: parameq|",
			bezout_entiers:"<<iegcd(45,75)>>\nExtended greatest common divisor of 2 integers\n|Also See: gcd,iabcuv,egcd|",
			binomial:"<<binomial(4,0,0.5)>>\nReturns comb(n,k)*p^k*(1-p)^(n-k) or comb(n,k) if no 3rd argument.\n|Also See: binomial_cdf,binomial_icdf,multinomial,randvector,ranm|",
			binomial_cdf:"<<binomial_cdf(4,0.5,2)>>\nReturns Proba(X<=x) or Proba(x<=X<=y) when X follows the B(n,p) law.\n|Also See: binomial,binomial_icdf|",
			binomial_icdf:"<<binomial_icdf(4,0.5,0.68)>>\nReturns h such as Proba(X<=h)=t when X follows the B(n,p) law.\n|Also See: binomial,binomial_cdf|",
			bitand:"<<bitand(0x12,0x38)>>\nLogical bit and\n|Also See: bitxor,bitor|",
			bitor:"<<bitor(0x12,0x38)>>\nInclusive logical bit or\n|Also See: bitxor,bitand|",
			bitxor:"<<bitxor(0x12,0x38)>>\nExclusive logical bit or\n|Also See: bitor,bitand|",
			blockmatrix:"<<blockmatrix(2,3,[idn(2),idn(2),idn(2),idn(2),idn(2),idn(2)])>>\nReturns the matrix get from the list divided into n lists of dimension m.\n|Also See: list2mat|",
			border:"<<border([[1,2,3,4],[4,5,6,8],[7,8,9,10]],[1,3,5])>>\nReturns the matrix obtained by bording A with b as latest column, if nrows(A)=size(b), border(A,b)=tran(append(tran(A),b)).\n|Also See: tran,append,augment|",
			cFactor:"<<cFactor(x^2*y+y)>>\nFactorization of the expression in ℂ (on the Gauss integers if there are more than 2 variables).\n|Also See: factor|",
			cSolve:"<<csolve(x^4-1,x)>>\nReturns the list of complex solutions of an equation or a matrix where the rows are ℂ-solutions of a system of polynomial equations.\n|Also See: cZeros,solve,fslove|",
			cZeros:"<<cZeros(x^2-1)>>\nReturns the list of complex elements solution of Xpr=0 or the matrix where the lines are the solutions of the system : Xpr1=0,Xpr2=0...\n|Also See: solve|",
			canonical_form:"<<canonical_form(2*x^2-12*x+1)>>\nCanonical_form of a 2 degree polynomial.",
			cauchy:"<<cauchy(0.0,2.0,1.0)>>\nReturns the density of probability at x of the Cauchy law of parameters x0 and a (by default  x0=0 and a=1).\n|Also See: cauchy_cdf,cauchy_icdf|",
			cauchy_cdf:"<<cauchy_cdf(0.0,2.0,2.1)>>\nReturns the probability that a Cauchy random variable is lower than x.\n|Also See: cauchyd,cauchy_icdf|",
			cauchy_icdf:"<<cauchy_icdf(0.0,2.0,0.95)>>\nReturns h such that the probability that a Cauchy random variable is lower than h is p (0<=p<=1).\n|Also See: cauchy_cdf,cauchy|",
			cauchyd:"<<cauchy(0.0,2.0,1.0)>>\nReturns the density of probability at x of the Cauchy law of parameters x0 and a (by default  x0=0 and a=1).\n|Also See: cauchy_cdf,cauchy_icdf|",
			cauchyd_cdf:"<<cauchy_cdf(0.0,2.0,2.1)>>\nReturns the probability that a Cauchy random variable is lower than x.\n|Also See: cauchyd,cauchy_icdf|",
			cauchyd_icdf:"<<cauchy_icdf(0.0,2.0,0.95)>>\nReturns h such that the probability that a Cauchy random variable is lower than h is p (0<=p<=1).\n|Also See: cauchy_cdf,cauchy|",
			cdf:"<<cdf(binomial,10,0.5,4)>>\nCumulated distribution function.\n|Also See: icdf,binomial_cdf,normald_cdf,plotcdf|",
			ceil:"<<ceil(-4.2)>>\nReturns the smallest integer >= to the argument.\n|Also See: floor,round|",
			ceiling:"<<ceil(-4.2)>>\nReturns the smallest integer >= to the argument.\n|Also See: floor,round|",
			cfactor:"<<cFactor(x^2*y+y)>>\nFactorization of the expression in ℂ (on the Gauss integers if there are more than 2 variables).\n|Also See: factor|",
			changebase:"<<changebase([[1,2],[1,3]],[[1,1],[0,1]])>>\nReturns the matrix B=inv(P)*A*P.",
			charpoly:"<<pcar([[1,2],[3,4]])>>\nList of the coefficients of the characteristic polynomial of a matrix or characteristic polynomial of a matrix with the second argument as variable.\n|Also See: jordan,egv,egvl,companion,rat_jordan,pmin|",
			chisquare:"<<chisquare(2,3.2)>>\nReturns the density of probability of the Chi^2 law at x0 (n is the number of degrees of freedom).\n|Also See: chisquare_cdf,chisquare_icdf,randvector,ranm|",
			chisquare_cdf:"<<chisquare_cdf(2,6.1)>>\nReturns the probability that a Chi^2 random variable is lower than x0 (n is the number of degrees of freedom).\n|Also See: UTPC,chisquare_icdf,chisquared|",
			chisquare_icdf:"<<chisquare_icdf(2,0.95)>>\nReturns h such as the probability that a Chi^2 random variable is lower than h is p (n is the number of degrees of freedom and 0<=p<=1).\n|Also See: chisquare_cdf,chisquared|",
			chisquared:"<<chisquare(2,3.2)>>\nReturns the density of probability of the Chi^2 law at x0 (n is the number of degrees of freedom).\n|Also See: chisquare_cdf,chisquare_icdf,randvector,ranm|",
			chisquared_cdf:"<<chisquare_cdf(2,6.1)>>\nReturns the probability that a Chi^2 random variable is lower than x0 (n is the number of degrees of freedom).\n|Also See: UTPC,chisquare_icdf,chisquared|",
			chisquared_icdf:"<<chisquare_icdf(2,0.95)>>\nReturns h such as the probability that a Chi^2 random variable is lower than h is p (n is the number of degrees of freedom and 0<=p<=1).\n|Also See: chisquare_cdf,chisquared|",
			chisquaret:"<<chisquaret([57,54])>>\nChi^2 test : adequation between 2 (or n) samples or between 1 sample and a distribution law (multinomial or given by a law).\n|Also See: normalt,studentt,kolmogorovt|",
			cholesky:"<<cholesky([[3,1],[1,4]])>>\nFor a numerical symmetric matrix A, returns L matrix such that A=L*tran(L).\n|Also See: lu,qr,gauss|",
			chrem:"<<symbolique.>>\nChinese remainders for integers or for polynomials.\n|Also See: gcd,fracmod,chinrem,ichinrem|",
			coeff:"<<coeff(x*3+2)>>\nReturns the list of coefficients of a polynomial with respect to the 2nd argument or the coefficient of the 3rd argument.\n|Also See: pcoeff,fcoeff|",
			coeffs:"<<coeff(x*3+2)>>\nReturns the list of coefficients of a polynomial with respect to the 2nd argument or the coefficient of the 3rd argument.\n|Also See: pcoeff,fcoeff|",
			colDim:"<<coldim([[1,2,3],[4,5,6]])>>\nNumber of columns of a matrix.\n|Also See: rowdim|",
			colNorm:"<<colNorm([[1,2],[3,-4]])>>\nReturns the max of the l1_norm fo the columns of a matrix: colNorm(a_{j,k})=max_k(sum_j(|a_{j,k}|))\n|Also See: norm|",
			colSwap:"<<colSwap([[1,2],[3,4],[5,6]],1,2)>>\nReturns the matrix get from A by swapping the n1-th column and the n2-th column.\n|Also See: rowSwap|",
			coldim:"<<coldim([[1,2,3],[4,5,6]])>>\nNumber of columns of a matrix.\n|Also See: rowdim|",
			collect:"<<collect(x^2-4)>>\nInteger factorization of a polynomial (or of a list of poly)\n|Also See: factor,factors|",
			colnorm:"<<colNorm([[1,2],[3,-4]])>>\nReturns the max of the l1_norm fo the columns of a matrix: colNorm(a_{j,k})=max_k(sum_j(|a_{j,k}|))\n|Also See: norm|",
			colspace:"<<colspace([[1,2,3],[1,2,3],[1,2,4],[1,2,5]])>>\nReturns a matrix where the columns are a basis of the vector space generated by the columns of the matrix A [d is the dimension of this space].\n|Also See: rowspace|",
			colswap:"<<colSwap([[1,2],[3,4],[5,6]],1,2)>>\nReturns the matrix get from A by swapping the n1-th column and the n2-th column.\n|Also See: rowSwap|",
			comDenom:"<<comDenom(1/x+1/y^2+1)>>\nReturns the expression after reduction at the same denominator : the numerator and the denominator are developed [according to the powers of the variable var].\n|Also See: normal|",
			comb:"<<comb(4,2)>>\ncomb(n,r)=number of combinations of r objects taken among n : n!/(r!(n-r)!) (If n<0 comb(n,r)=n(n-1)..(n-r+1)/r!).\n|Also See: factorial,perm|",
			companion:"<<companion(x^2+5x-7,x)>>\nCompanion matrix of a polynomial (an=1).\n|Also See: pcar,rat_jordan|",
			complexroot:"<<complexroot(x^5-2*x^4+x^3+i,0.1)>>\nReturns the list of the vertices of the squares (side<=l) containing roots of P [inside the rectangle with opposed vertices a and b] with their multiplicity.\n|Also See: proot,froot,realroot,rationalroot,crationalroot|",
			concat:"<<concat([1,2],[3,4,5])>>\nConcatenates two lists or two strings or two sequences or 2 matrix.\m|Also See: append,cat,semi_augment,border|",
			cond:"<<COND([[1,2],[1,4]])>>\nCondition number of a matrix, use COND(.,1) for l1, COND(.,2) for l2 norm and COND(.,inf) for linf (1 by default).\n|Also See: SVL|",
			conj:"<<conj(1+i)>>\nReturns the conjugate of a complex number.\n|Also See: re,im,tran|",
			conjugate_gradient:"<<conjugate_gradient([[2,1],[1,5]],[1,0])>>\nConjuagte gradient algorithm to solve A*x=y approximately (precision eps) where A is a symmetric positive definite matrix, x0 an optional initial guess.\n|Also See: linsolve|",
			contains:"<<contains(%{0,1,2,3%},2)>>\nTests if a set contains an expression (returns the index+1 or 0).\n|Also See: inString,member,est_element|",
			content:"<<content(2*x^2+10*x+6)>>\nReturns the gcd of the coefficients of the polynomial P given as argument.\n|Also See: primpart,lgcd|",
			copy:"<< A:=copy(B)>>\nA:=copy(B) clones the list or matrix B in A.\n|Also See: =<|",
			correlation:"<<correlation([[1,2],[1,1],[4,7]])>>\nReturns the correlation of the elements of its argument.\n|Also See: covariance,covariance_correlation|",
			cos:"<<cos(0)>>\nCosine or Option of the convert or convertir command (id trigcos).\n|Also See: acos,convert,trigsin|",
			cos2sintan:"<<cos2sintan(cos(x))>>\nReplaces cos(x) by sin(x)/tan(x) in the argument\n|Also See: tan2sincos,sin2costan,tan2sincos2,tan2cossin2|",
			cosh:"<<cosh(0)>>\nHyperbolic cosine.\n|Also See: acosh|",
			cot:"<<cot(pi/2)>>\nCotangent.\n|Also See: acot,tan|",
			cote:"<<cote(point[1,2,3])>>\nThird coordinate (z) of a 3-d point.\n|Also See: abscissa,ordinate,coordinates|",
			count:"<<count(id,[-2/5,-1,0,1,2,3/5])>>\nReturns f(l[0])+f(l[1])+...+f(l[size(l)-1]) or count number of occurrences if the argument is a vector of integers.\n|Also See: count_eq,count_inf,count_sup|",
			count_eq:"<<count_eq(1,[-2,1,0,1,2,-3])>>\nReturns the number of elements of L equal to a.\n|Also See: count,count_inf,count_sup|",
			count_inf:"<<count_inf(1,[-2,-1,0,1,2,3])>>\nReturns the number of elements of L strictly lower than a.\n|Also See: count,count_eq,count_sup|",
			count_sup:"<<count_sup(1,[-2,-1,0,1,2,3])>>\nReturns the number of elements of L strictly greater than a.\n|Also See: count,count_inf,count_eq|",
			covariance:"<<covariance([[1,2],[1,1],[4,7]])>>\nReturns the covariance of the elements of its argument\n|Also See: correlation,covariance_correlation|",
			covariance_correlation:"<<covariance_correlation([[1,2],[1,1],[4,7]])>>\nReturns the list of the covariance and the correlation of the elements of its argument.\n|Also See: covariance,correlation|",
			cpartfrac:"<<cpartfrac((x)/(4-x^2))>>\nPerforms partial fraction decomposition in ℂ of a fraction\n|Also See: factor,normal|",
			crationalroot:"<<crationalroot(2*x^3+(-5-7*i)*x^2+(-4+14*i)*x+8-4*i)>>\nReturns the list of complex rational roots of P without indicating the multiplicity.\n|Also See: proot,froot,complexroot,rationalroot,realroot|",
			cross:"<<cross([1,2],[3,4])>>\nWedge product.\n|Also See: dot|",
			crossP:"<<cross([1,2],[3,4])>>\nWedge product.\n|Also See: dot|",
			cross_ratio:"<<cross_ratio(i,2+i,3/2+i,3+i)>>\nReturns the complex number equal to ((c-a)/(c-b))/((d-a)/(d-b)).\n|Also See: harmonic_conjugate,is_conjugate|",
			crossproduct:"<<cross([1,2],[3,4])>>\nWedge product.\n|Also See: dot|",
			csc:"<<csc(pi/2)>>\nCosecant: csc(x)=1/sin(x).\n|Also See: sin,acsc|",
			curl:"<<curl([2*x*y,x*z,y*z],[x,y,z])>>\ncurl([A,B,C],[x,y,z])=[dC/dy-dB/dz,dA/dz-dC/dx,dB/dx-dA/dy].\n|Also See: derive,divergence|",
			cycle2perm:"<<cycle2perm([1,3,5])>>\nConverts the cycle c to a permutation.\n|Also See: cycles2permu,permu2cycles|",
			cycleinv:"<<cycleinv([1,3,5])>>\nReturns the inverse cycle of the cycle c.\n|Also See: perminv|",
			cycles2permu:"<<cycles2permu([[1,3,5],[3,4]])>>\nConverts a product of cycles into a permutation.\n|Also See: permu2cycles,cycle2perm|",
			cyclotomic:"<<cyclotomic(20)>>\nN-th cyclotomic polynomial.\n|Also See: none|",
			deSolve:"<<desolve(y'+x*y=0)>>\nSolves a differential equation or a differential linear system with constant coefficients.\n|Also See: integrate,diff,odesolve,plotode,plotfiefd|",
			degree:"<<degree(x^3+x)>>\nDegree of the polynomial P.\n|Also See: valuation,size|",
			delcols:"<<delcols([[1,2,3],[4,5,6],[7,8,9]],1..1)>>\nReturns the matrix where the columns n1..n2 (or n1) of the matrix A are deleted.\n|Also See: delrows|",
			delrows:"<<delrows([[1,2,3],[4,5,6],[7,8,9]],1..1)>>\nReturns the matrix where the rows n1..n2 (or n1) of the matrix A are deleted.\n|Also See: delcols|",
			deltalist:"<<deltalist([1,4,8,9])>>\nReturns the list of the difference of two terms in succession.",
			denom:"<<denom(25/15)>>\nReturns the denominator of the simplified fraction.\n|Also See: getDenom,getNum,numer,f2nd|",
			derive:"<<diff(x^3-x)>>\nReturns the derivative with respect to the 2nd argument.\n|Also See: ',function_diff,integrate,taux_accroissement|",
			desolve:"<<desolve(y'+x*y=0)>>\nSolves a differential equation or a differential linear system with constant coefficients.\n|Also See: integrate,diff,odesolve,plotode,plotfiefd|",
			det:"<<det([[1,2],[3,4]])>>\nDeterminant of a square matrix M.\n|Also See: rref,det_minor,Det|",
			det_minor:"<<det_minor([[1,2],[3,4]])>>\nReturns the determinant calculated with the calculus of minors.\n|Also See: det|",
			dfc:"<<dfc(sqrt(2),5)>>\nReturns the continue fraction development of x0 of order n or with precision eps.\n|Also See: dfc2f,convert|",
			dfc2f:"<<dfc2f([1,1,1])>>\nConverts a continue fraction into a real.\n|Also See: dfc,convert|",
			diag:"<<diag([1,2],[3,4])>>\nReturns either the diagonal matrix with diagonal l or the diagonal of A.\n|Also See: identity|",
			diff:"<<diff(x^3-x)>>\nReturns the derivative with respect to the 2nd argument.\n|Also See: ',function_diff,integrate,taux_accroissement|",
			dim:"<<dim([[1,2,3],[4,5,6]])>>\nReturns the list which gives the dimension of the matrix specified as argument.\n|Also See: rowdim,coldim,sizes,size|",
			div:"<< 125 div 15>>\nEuclidean quotient of 2 integers (infixed operator).\n|Also See: iquo,mod|",
			divergence:"<<divergence([x^2+y,x+z+y,z^3+x^2],[x,y,z])>>\ndivergence([A,B,C],[x,y,z])=dA/dx+dB/dy+dC/dz.\n|Also See: derive,curl|",
			divide:"<<quorem([1,2,3,4],[-1,2])>>\nEuclidean quotient and remainder of 2 polynomials\n|Also See: rem,quo,iquorem|",
			divis:"<<divis(x^2-1)>>\nReturns the list of divisors of a polynomial.\n|Also See: idivis,factors,poly2symb|",
			division_point:"<<division_point(i,2+i,3+i)>>\nReturns the point M such that (z-a)=k*(z-b) and z=affix of M (MA=k*MB).\n|Also See: harmonic_conjugate,is_conjugate|",
			divisors:"<<idivis(36)>>\nReturns the list of divisors of an integer.\n|Also See: divis,ifactors|",
			divpc:"<<divpc(x^4+x+2,x^2+1,5)>>\nn-degree Taylor-poly for the quotient of 2 polynomials.\n|Also See: series,quorem|",
			dot:"<<dot([1,2],[3,4])>>\nScalar product.\n|Also See: *,cross,.*,hadamard|",
			dsolve:"<<desolve(y'+x*y=0)>>\nSolves a differential equation or a differential linear system with constant coefficients.\n|Also See: integrate,diff,odesolve,plotode,plotfiefd|",
			e2r:"<<symb2poly(x*3+2.1)>>\nReturns the coefficients of a polynomial with respect to the 2nd argument or if the second argument is a list the internal format of the polynomial.\n|Also See: poly2symb,r2e|",
			egcd:"<<egcd((x-1)^2,x^3-1)>>\nExtended greatest common divisor of 2 polynomials.\n|Also See: gcd,iegcd|",
			egv:"<<egv([[-2,-2,1],[-2,1,-2],[1,-2,-2]])>>\nComputes the eigenvectors of a diagonalizable matrix.\n|Also See: egvl,jordan|",
			egvl:"<<egvl([[4,1],[-4,0]])>>\nReturns the Jordan matrix associated to A when the eigenvalues are calculable.\n|Also See: egv,jordan|",
			eigVc:"<<egv([[-2,-2,1],[-2,1,-2],[1,-2,-2]])>>\nComputes the eigenvectors of a diagonalizable matrix.\n|Also See: egvl,jordan|",
			eigVl:"<<egvl([[4,1],[-4,0]])>>\nReturns the Jordan matrix associated to A when the eigenvalues are calculable.\n|Also See: egv,jordan|",
			eigenvals:"<<eigenvals([[-2,-2,1],[-2,1,-2],[1,-2,-2]])>>\nReturns the sequence of the (calculable) eigenvalues of a matrix.\n|Also See: egv,jordan|",
			eigenvalues:"<<eigenvals([[-2,-2,1],[-2,1,-2],[1,-2,-2]])>>\nReturns the sequence of the (calculable) eigenvalues of a matrix.\n|Also See: egv,jordan|",
			eigenvectors:"<<egv([[-2,-2,1],[-2,1,-2],[1,-2,-2]])>>\nComputes the eigenvectors of a diagonalizable matrix.\n|Also See: egvl,jordan|",
			eigenvects:"<<egv([[-2,-2,1],[-2,1,-2],[1,-2,-2]])>>\nComputes the eigenvectors of a diagonalizable matrix.\n|Also See: egvl,jordan|",
			eliminate:"<<eliminate([x=v0*t,y=y0-g*t^2],t)>>\nEliminates the variables vars in a list of algebraic equations",
			epsilon:"<<epsilon()>>\nReturns the value of epsilon of the cas configuration\n|Also See:  epsilon2zero|",
			epsilon2zero:"<<epsilon2zero(1e-13+x+5)>>\nValues < epsilon are replaced by zero\n|Also See: evalf|",
			equal:"<< 2*x=4>>\nPrefixed version of =\n|Also See: =,equal2diff,equal2list,left,right|",
			equal2diff:"<<equal2diff(x=2)>>\nA=B or equal(A,B) is converted into the difference A-B\n|Also See: left,right,equal2list,equal,=|",
			equal2list:"<<equal2list(x=2)>>\nA=B or equal(A,B)is converted into the list [A,B]\n|Also See: left,right,equal2diff,equal,=|",
			erf:"<<erf(1)>>\nReturns the approximate value of 2/sqrt(pi)*int(exp(-t^2),t,0,x0).\n|Also See: erfc|",
			erfc:"<<erfc(1)>>\nReturns the approximate value of 2/sqrt(pi)*int(exp(-t^2),t,x0,+infinity).\n|Also See: erf|",
			euler:"<<euler(11)>>\nEuler's function (euler(n)=card({p<n,gcd(n,p)=1})).\n|Also See: gcd|",
			eval:"<<eval(2*sin(pi))>>\nEvaluates its argument.\n|Also See: evalf|",
			evala:"<<normal(2*x+y=1)>>\nSimplify the expression\n|Also See: simplify|",
			evalb:"<<evalb(a==2)>>a)>\nBoolean evaluation of the argument\n|Also See: evalf,eval|",
			evalc:"<<evalc(-3+4*i+exp(i))>>\nReturns an complex expression simplified with the format real+i*imag.\n|Also See: normal|",
			evalf:"<<evalf(2/3)>>\nNumerical evaluation of the first argument (we can give the number of digits as second argument)\n|Also See: evalb,eval|",
			evalm:"<<eval(2*sin(pi))>>\nEvaluates its argument.\n|Also See: evalf|",
			even:"<<even(6)>>\nReturns 1 if the integer is even, else returns 0.\n|Also See: odd|",
			exact:"<<-2>>\nConverts the expression to a rational or real expression.",
			exp:"<<exp(0)>>\nExponential or Option of the convert or convertir command (id trig2exp).\n|Also See: ln,convert,trig2exp|",
			exp2pow:"<<exp2pow(exp(3*ln(x)))>>\nTransforms exp(n*ln(x)) in x^n.\n|Also See: pow2exp|",
			exp2trig:"<<exp2trig(exp(i*x))>>\nTransforms the complex exponential into sine and cosine.\n|Also See: trig2exp,atrig2ln|",
			expand:"<<expand((x+y)*(z+1))>>\nFull distribution of * and / over + and -\n|Also See: normal,simplify,ratnormal|",
			expexpand:"<<expexpand(exp(3*x))>>\nExpands exponentials.\n|Also See: texpand,lnexpand,trigexpand|",
			exponential:"<<exponential(2.1,3.5)>>\nReturns the density of probability at x of the exponential law of parameter lambda.\n|Also See: exponential_cdf,exponential_icdf,randvector,ranm|",
			exponential_cdf:"<<exponential_cdf(4.2,2.1)>>\nReturns the probability that a exponential random variable of parameter lambda is lower than x0 (or between x0 and y0).\n|Also See: exponentiald,exponential_icdf|",
			exponential_icdf:"<<exponential_icdf(4.2,0.95)>>\nReturns h such that the probability that a exponential random variable of parameter lambda is lower than h is p (0<=p<=1).\n|Also See: exponential_cdf,exponentiald|",
			exponential_regression:"<<exponential_regression([[1.0,2.0],[0.0,1.0],[4.0,7.0]])>>\nReturns the coefficients (a,b) of y=b*a^x : it is the best exponential which approx the points where the coordinates are the rows of A (or the 2 lists).\n|Also See: logarithmic_regression|",
			exponentiald:"<<exponential(2.1,3.5)>>\nReturns the density of probability at x of the exponential law of parameter lambda.\n|Also See: exponential_cdf,exponential_icdf,randvector,ranm|",
			exponentiald_cdf:"<<exponential_cdf(4.2,2.1)>>\nReturns the probability that a exponential random variable of parameter lambda is lower than x0 (or between x0 and y0).\n|Also See: exponentiald,exponential_icdf|",
			exponentiald_icdf:"<<exponential_icdf(4.2,0.95)>>\nReturns h such that the probability that a exponential random variable of parameter lambda is lower than h is p (0<=p<=1).\n|Also See: exponential_cdf,exponentiald|",
			ezgcd:"<<ezgcd(x^2-2*xy+y^2-1,x-y)>>\nGCD of 2 polynomials with at least 2 variables, with the ezgcd algorithm.\n|Also See: gcd,modgcd,heugcd,psrgcd|",
			fMax:"<<fMax(-x^2+2*x+1,x)>>\nReturns the abscissa of the maximum of the expression.\n|Also See: fMin|",
			fMin:"<<fMin(x^2-2*x+1,x)>>\nReturns the abscissa of the minimum of the expression.\n|Also See: fMax|",
			fPart:"<<fPart(1/2)>>\nReturns the fractional part.\n|Also See: floor,iPart,trunc|",
			factor:"<<factor(x^4-1)>>\nFactorizes a polynomial.\n|Also See: ifactor,partfrac,normal|",
			factor_xn:"<<factor_xn(x^4-1)>>\nFactorizes x^n in P (n=degree of polynomial P).\n|Also See: ifactor,partfrac,normal|",
			factorial:"<<factorial(4)>>\nfactorial(n)=n!. For non-integers,factorial(a)=a! = G(a + 1). This calculates the Gamma function.\n|Also See: comb,perm|",
			factors:"<<factors(x^4-1)>>\nReturns the list of prime factors of a polynomial (each factor is followed by its multiplicity).\n|Also See: factor,ifactors|",
			fcoeff:"<<fcoeff([1,2,0,1,3,-1])>>\nReturns the polynomial describe by the list (root or pole, order).\n|Also See: pcoeff,froot,proot|",
			fft:"<<fft([1,2,3,4,0,0,0,0])>>\nFast Fourier Transform in ℝ or in the field ℤ/pℤ, with a as primitive n-th root of 1 (n=size(L)).\n|Also See: ifft|",
			find:"<<find(1,[3,x,1,2,1,3])>>\nList of positions of an object in a list",
			fisher:"<<fisher(4,10,2.1)>>\nReturns the density of probability of the Fisher-Snedecor law (n and m are the numbers of degrees of freedom).\n|Also See: fisher_cdf,fisher_icdf,randvector,ranm|",
			fisher_cdf:"<<fisher_cdf(4,4,2.1)>>\nReturns the probability that a Fisher-Snedecor random variable is lower than x0 (n and m are the numbers of degrees of freedom).\n|Also See: UTPF,fisher_icdf,fisherd|",
			fisher_icdf:"<<fisher_icdf(4,10,0.95)>>\nReturns h such as the probability that a Fisher-Snedecor random variable is lower than h is p (n and m are the numbers of degrees of freedom and 0<=p<=1).\n|Also See: fisher_cdf,fisherd|",
			flatten:"<<flatten([[1,[2,3],4],[5,6]])>>\nRecursively flatten a list containing lists.\n|Also See: mat2list|",
			float2rational:"<<-2>>\nConverts the expression to a rational or real expression.",
			floor:"<<floor(-2.5)>>\nReturns the greatest integer <= to the argument\n|Also See: round,ceil,iPart,trunc|",
			fourier_an:"<<fourier_an(x^2,x,2,0,-1)>>\nReturns the n-th Fourier coefficient an=2/T*integrate(f(x)*cos(2*pi*n*x/T),a,a+T).\n|Also See: fourier_cn,fourier_bn,assume|",
			fourier_bn:"<<fourier_bn(x^2,x,2,0,-1)>>\nReturns the n-th Fourier coefficient bn=2/T*integrate(f(x)*sin(2*pi*n*x/T),a,a+T).\n|Also See: fourier_cn,fourier_an,assume|",
			fourier_cn:"<<fourier_cn(x^2,x,2,0,-1)>>\nReturns the n-th Fourier coefficient cn=1/T*integrate(f(x)*exp(-2*i*pi*n*x/T),a,a+T).\n|Also See: fourier_an,fourier_bn,assume|",
			frac:"<<fPart(1/2)>>\nReturns the fractional part.\n|Also See: floor,iPart,trunc|",
			fracmod:"<<fracmod(41,121)>>\nReturns the fraction a/b such as a/b=Xpr mod n, -sqrt(n)/2<a<=sqrt(n)/2 and 0<=b<sqrt(n)/2.\n|Also See: smod|",
			frequencies:"<<frequencies([1,2,1,1,2,1,2,4,3,3])>>\nReturns the frequencies of a list values.\n|Also See: histogram,cumulated_frequencies,bar_plot,classes|",
			frobenius_norm:"<<frobenius_norm([[1,2,3],[3,-9,6],[4,5,6]])>>\nFrobenius norm of a matrix A (=sqrt(sum |aij|^2)).\n|Also See: l1norm,l2 norm,linfnorm,matrix_norm|",
			froot:"<<froot((x^5-2*x^4+x^3)/(x-3))>>\nReturns the list of roots and poles of F with their multiplicity.\n|Also See: proot,fcoeff,pcoeff,realroot,complexroot,rationalroot,crationalroot|",
			fsolve:"<<fsolve(cos(x)=x,x,-1..1,bisection_solver)>>\nNumerical solution of an equation or a system of equation.\n|Also See: solve,nSolve,csolve|",
			function_diff:"<<function_diff(sin+id)>>\nReturns the derivative function of the function f.\n|Also See: diff,',@|",
			Gamma: "<<Gamma(6)>>\nCalculus of Gamma at a point a (Gamma(n+1)=n! for n integer) (Gamma(a)=int(e^{-t}*t^{a-1},t=0..inf))",
			gammad:"<<gammad(2.2,1.5,0.8)>>\nReturns the density of probability of the Gamma law (=x^(a-1)*exp(-b*x)*b^a/Gamma(a)).\n|Also See: gammad_cdf,gammad_icdf|",
			gammad_cdf:"<<gammad_cdf(2,1,2.96)>>\nReturns the probability that a Gamma random variable (with a and b as parameters) is lower than x0 or between x0 and y0.\n|Also See: gammad,gammad_icdf|",
			gammad_icdf:"<<gammad_icdf(2,1,0.95)>>\nReturns h such that the probability that a Gamma random variable is lower than h is p (0<=p<=1).\n|Also See: gammad_cdf,gammad|",
			gauss:"<<gauss(x^2+2*a*x*y,[x,y])>>\nSplit a quadratic form as a sum/difference of square\n|Also See: cholesky|",
			gaussjord:"<<rref([[3,1,-2],[3,2,2]])>>\nRow reduction to echelon form of AX=b (M=A|(-b)) [Reduction on columns 0..k-1]\n|Also See: ker,image,det,Rref,pivot,ref,keep_pivot|",
			gaussquad:"<<gaussquad(exp(x^2),x,0,1)>>\nReturns the approximate value of integrate(f(x),x,a,b) by adaptive Gaussian quadratures with 15 points.\n|Also See: integrate,romberg|",
			gbasis:"<<gbasis([x^2-y^3,x+y^2],[x,y])>>\nGroebner basis of the ideal spanned by the list of polynomials.\n|Also See: greduce|",
			gcd:"<<gcd(45,75)>>\nReturns the greatest common divisor of 2 polynomials of several variables or of 2 integers or of 2 rationals.\n|Also See: lcm,euler,modgcd,ezgcd,psrgcd,heugcd,Gcd|",
			gcdex:"<<egcd((x-1)^2,x^3-1)>>\nExtended greatest common divisor of 2 polynomials.\n|Also See: gcd,iegcd|",
			genpoly:"<<genpoly(15,4,x)>>\nReturns the reconstruction of a n-variables polynomial Q(-b/2<=coef<=b/2) from a (n-1)-variable polynomial P and a base b (subst(Q,var=b)=P).",
			geometric:"<<geometric(0.3,4)>>\nReturns the value at k of the geometric law of parameter p (0<p<1).\n|Also See: geometric_cdf,geometric_icdf,randvector,ranm|",
			geometric_cdf:"<<geometric_cdf(0.3,4)>>\nReturns the probability that a geometric random variable of parameter p (0<p<1) is lower than k (or between k and m).\n|Also See: geometric,geometric_icdf|",
			geometric_icdf:"<<geometric_icdf(0.3,0.95)>>\nReturns h such that the probability that a geometric random variable of parameter p (0<p<1) is lower than h is x (0<=x<=1).\n|Also See: geometric_cdf,geometric|",
			getDenom:"<<getDenom(25/15)>>\nReturns the denominator of the unsimplified expression (except for rational number).\n|Also See: denom,getNum,numer,f2nd|",
			getNum:"<<getNum(25/15)>>\nReturns the numerator of the unsimplified expression (except for rational number).\n|Also See: numer,denom,getDenom,f2nd|",
			gradient:"<<gradient(2*x^2*y-x*z^3,[x,y,z])>>\nReturns the gradient of the expression Xpr\n|Also See: hessian|",
			gramschmidt:"<<-2>>integrate(p*q,x,-1,1))>\nReturns an orthonormal base of E of base B for the scalar product Sp",
			greduce:"<<greduce(x*y-1,[x^2-y^2,2*x*y-y^2,y^3],[x,y])>>\nReturns the remainder of the division of a polynomial by a Groebner basis.\n|Also See: gbasis|",
			groupermu:"<<groupermu([1,2,0],[3,1,2,0])>>\nReturns the group of permutations generated by a and b.",
			hadamard:"<<hadamard([[1,2],[3,4]])>>\nHadamard bound of a matrix or element by element multiplication of 2 matrix\n|Also See: .*,*|",
			halftan:"<<halftan(sin(x))>>\nTransforms sin(x),cos(x) and tan(x) as function of tan(x/2).",
			halftan_hyp2exp:"<<halftan_hyp2exp(sin(x)+sinh(x))>>\nTransforms the trigonometric functions in tan(x/2) and hyperbolic functions in exp\n|Also See: hyp2exp,halftan|",
			has:"<<has(x+y,x)>>\nChecks if a variable is in an expression\n|Also See: lname,lvar|",
			head:"<<head([1,2,3])>>\nShows the first element of a vector or a sequence or a string.\n|Also See: back,tail,mid,left,right|",
			hermite:"<<hermite(3)>>\nReturns the Hermite polynomial of degree n\n|Also See: legendre,laguerre|",
			hessenberg:"<<hessenberg([[1,2,3],[4,5,6],[7,8,1]])>>\nMatrix reduction to Hessenberg form. Returns [P,B] such that B=inv(P)*A*P, by default n=0 the result is exact else the result is numeric. For n=-1 B is triangular, n=-2 P is orthogonal and if n is prime the result is mod n.\n|Also See: SCHUR|",
			hessian:"<<hessian(2*x^2*y-x*z,[x,y,z])>>\nReturns the hessian of the expression Xpr\n|Also See: grad|",
			heugcd:"<<heugcd(x^4-1,(x-1)^2)>>\nGCD of 2 polynomials, with the algorithm called heuristic pgcd.\n|Also See: gcd,modgcd,ezgcd,psrgcd|",
			hilbert:"<<hilbert(4)>>\nReturns the order n Hilbert matrix : Hjk=1/(j+k+1) j,k=1..n",
			histogram:"<<histogram([1,2,1,1,2,1,2,4,3,3],3)>>\nReturns the frequencies of a list values based on the number of bins requested.  Returned matrix has first column bin-minimum, second column bin-maximum, and last column is the frequency within the bin.\n|Also See: frequencies,cumulated_frequencies,bar_plot,classes|",
			horner:"<<horner(x^2+1,2)>>\nReturns the value of P(a) calculated with Horner's method.\n|Also See: convert,base,revlist|",
			hyp2exp:"<<hyp2exp(cosh(x))>>\nTransforms the hyperbolic functions with the exponential function\n|Also See: halftan_hyp2exp|",
			iPart:"<<iPart(4.3)>>\nReturns the argument without its fractional part (type=DOM_FLOAT).\n|Also See: fPart,floor,trunc|",
			iabcuv:"<<iabcuv(21,28,7)>>\nReturns [u,v] such as au+bv=c for 3 integers a,b,c\n|Also See: iegcd,abcuv|",
			ibpdv:"<<ibpdv(ln(x),x)>>\nIntegration by parts of f(x)=u(x)*v'(x) with f(x) as 1st argument and v(x) (or 0) as 2nd argument. You can specify a variable of integration and also the calculus of the integrate (bounds a and b).\n|Also See: ibpu,int|",
			ibpu:"<<ibpu(ln(x),ln(x))>>\nIntegration by parts of f(x)=u(x)*v'(x) with f(x) as 1st argument and u(x) (or 0) as 2nd argument. You can specify a variable of integration and also the calculus of the integrate (bounds a and b).\n|Also See: ibpdv,int|",
			icdf:"<<icdf(binomial,10,0.5,0.6)>>\nInverse cumulated distribution function.\n|Also See: cdf,binomial_icdf,normald_icdf|",
			ichinrem:"<<ichinrem([2,7],[3,5])>>\nChinese remainders for integers.\n|Also See: gcd,fracmod,chinrem,chrem|",
			ichrem:"<<ichinrem([2,7],[3,5])>>\nChinese remainders for integers.\n|Also See: gcd,fracmod,chinrem,chrem|",
			icontent:"<<icontent(24x^3+6x^2-12x+18)>>\nGCD of the integer coefficients of a polynomial.",
			identity:"<<identity(3)>>\nReturns the identity matrix of specified dimension n.\n|Also See: ranm|",
			idivis:"<<idivis(36)>>\nReturns the list of divisors of an integer.\n|Also See: divis,ifactors|",
			idn:"<<identity(3)>>\nReturns the identity matrix of specified dimension n.\n|Also See: ranm|",
			iegcd:"<<iegcd(45,75)>>\nExtended greatest common divisor of 2 integers\n|Also See: gcd,iabcuv,egcd|",
			ifactor:"<<ifactor(50)>>\nFactorization of an integer into prime factors.\n|Also See: factor|",
			ifactors:"<<ifactors(36)>>\nReturns the list of prime factors of an integer (each factor is followed by its multiplicity).\n|Also See: ifactor,factors|",
			ifft:"<<ifft([100.0,-52.2842712475+6*i,-8.0*i,4.28427124746-6*i,4.0,4.28427124746+6*i,8*i,-52.2842712475-6*i])>>\nInverse Fast Fourier Transform.\n|Also See: fft|",
			igamma:"<<igamma(5.0,2.0)>>\nCalculus of gamma at a point (a,x) (igamma(a,x)=int(e^{-t}*t^{a-1},t=0..x)).(igamma(a,x,1)=igamma(a,x)/Gamma(a)).\n|Also See: Psi,Beta,Gamma|",
			igcd:"<<gcd(45,75)>>\nReturns the greatest common divisor of 2 polynomials of several variables or of 2 integers or of 2 rationals.\n|Also See: lcm,euler,modgcd,ezgcd,psrgcd,heugcd,Gcd|",
			igcdex:"<<iegcd(45,75)>>\nExtended greatest common divisor of 2 integers\n|Also See: gcd,iabcuv,egcd|",
			ihermite:"<<ihermite([[9,-36,30], [-36,192,-180], [30,-180,180]])>>\nHermite normal form of a matrix with coefficients in ℤ : returns U,B such that U is invertible in ℤ, B upper triangular and B=U*A.\n|Also See: ismith|",
			ilaplace:"<<ilaplace(1/(x^2+1)^2)>>\nInverse Laplace transform of a rational fraction\n|Also See: laplace,ztrans,invztrans|",
			im:"<<im(1+2*i)>>\nReturns the imaginary part of a complex number\n|Also See: re,conj|",
			in_ideal:"<<in_ideal((x+y)^2,[y^2,x^2+2*x*y],[x,y])>>\nChecks whether a polynomial or list of polynomials belongs to an ideal given by a Grobner basis (2nd argument) with respect to a variable list\n|Also See: gbasis,greduce|",
			indets:"<<lname(exp(x)*2*sin(y))>>\nList of variables in the expression\n|Also See: has,lvar|",
			infnorm:"<<infnorm([[1,2,3],[3,-9,6],[4,5,6]])>>\nMatrix norm induced by linfinty norm.\n|Also See: l1norm,l2norm,matrix_norm,frobenius_norm|",
			int:"<<int(1/x)>>\nIndefinite integral, you can specify a variable of integration or the calculus of the integrate (bounds a and b).\n|Also See: Int,diff,plotarea,romberg,gaussquad|",
			intDiv:"<<iquo(125,15)>>\nEuclidean quotient of 2 integers.\n|Also See: irem,smod,quo|",
			interp:"<<lagrange([1,3,4],[0,1,2])>>\nReturns the polynomial of degree n-1 such that P(xk)=yk k=0..n-1\n|Also See: spline|",
			inv:"<<inv(9/5)>>\nReturns the inverse of an expression or matrix.\n|Also See: Inv|",
			inverse:"<<inv(9/5)>>\nReturns the inverse of an expression or matrix.\n|Also See: Inv|",
			invlaplace:"<<ilaplace(1/(x^2+1)^2)>>\nInverse Laplace transform of a rational fraction\n|Also See: laplace,ztrans,invztrans|",
			invztrans:"<<invztrans(1/(x^2+1)^2)>>\nInverse z transform of a rational fraction\n|Also See: ztrans,laplace,invlaplace|",
			iquo:"<<iquo(125,15)>>\nEuclidean quotient of 2 integers.\n|Also See: irem,smod,quo|",
			iquorem:"<<iquorem(125,15)>>\nEuclidean quotient and remainder of 2 integers.\n|Also See: irem,iquo,quorem|",
			iratrecon:"<<fracmod(41,121)>>\nReturns the fraction a/b such as a/b=Xpr mod n, -sqrt(n)/2<a<=sqrt(n)/2 and 0<=b<sqrt(n)/2.\n|Also See: smod|",
			irem:"<<irem(125,15)>>\nEuclidean remainder of 2 integers.\n|Also See: iquo,smod,rem,mod|",
			isPrime:"<<isprime(1999)>>\nPrimality testing (=true or false).\n|Also See: prevprime,nextprime,is_prime,is_pseudoprime|",
			is_cycle:"<<is_cycle([1,0,5])>>\nReturns 1 if the argument is a cycle and 0 otherwise.\n|Also See: is_permu,cycle2perm,cycles2permu|",
			is_included:"<<is_included([1,2,-3],[-1,-2,2,1,-3])>>\nTest if a set or a list is included in another set or list.",
			is_permu:"<<is_permu([4,2,3,1])>>\nReturns 1 if the argument is a permutation and 0 otherwise\n|Also See: is_cycle,permu2cycles|",
			is_prime:"<<is_prime(1999)>>\nMixed or \"p-1\" Pocklington [1] or APRCL test [2] (returns the coefficients for a proof of primality, 1 or 0)\n|See Also: prevprime,nextprime,is_pseudoprime,isprime|",
			is_pseudoprime:"<<is_pseudoprime(1999)>>\nPseudo-prime test (0 not prime, 1 probably prime, 2 prime)\n|Also See: prevprime,nextprime,is_prime|",
			ismith:"<<ismith([[9,-36,30],[-36,192,-180],[30,-180,180]])>>\nSmith normal form of a matrix with coefficients in ℤ : returns U,B,V such that U and V invertible in ℤ, B diagonal, B[j,j] divide B[j+1,j+1] and B=U*A*V.\n|Also See: ihermite|",
			isprime:"<<isprime(1999)>>\nPrimality testing (=true or false).\n|Also See: prevprime,nextprime,is_prime,is_pseudoprime|",
			ithprime:"<<ithprime(1229)>>\nReturns the n-th prime number less than 10000 (for the moment).\n|Also See: nextprime,prevprime|",
			jordan:"<<jordan([[0,2],[1,0]])>>\nReturns the list made by the matrix of passage and the Jordan form of a matrix.\n|Also See: egv,egvl,rat_jordan|",
			ker:"<<ker([[1,2],[3,6]])>>\nKernel of a linear application of matrix M\n|Also See: image,rref,Nullspace|",
			kernel:"<<ker([[1,2],[3,6]])>>\nKernel of a linear application of matrix M\n|Also See: image,rref,Nullspace|",
			kolmogorovd:"<<kolmogorovd(1.36)>>\nKolmogorov-Smirnov distribution, 1-2*sum((-1)^(k-1)*exp(-k^2*x^2),k,1,inf)",
			kolmogorovt:"<<kolmogorovt(randvector(100,normald,0,1),randvector(100,normald,0,1))>>\nKolmogorov-Smirnov adequation test to a continuous distribution law, between 2 samples l1 l2 (unknown law) or between a sample l1 and a distribution law s.\n|Also See: chisquaret,normalt,studentt|",
			l1norm:"<<ou triple norme d'une matrice selon l1.>>\nReturns the l1 norm of the vector=sum of the absolute values of its coordinates or matrix norm according to l1.\n|Also See: l2norm,maxnorm,matrixnorm|",
			l2norm:"<<norm([1,2])>>\nReturns the l2 norm of a vector = sqrt(x1^2+x2^2+...xn^2) or matrix norm induced by l2 norm.\n|Also See: maxnorm,l1norm|",
			lagrange:"<<lagrange([1,3,4],[0,1,2])>>\nReturns the polynomial of degree n-1 such that P(xk)=yk k=0..n-1\n|Also See: spline|",
			laguerre:"<<laguerre(4)>>\nReturns the n-th Laguerre polynomial\n|Also See: legendre,hermite|",
			laplace:"<<laplace(exp(x)*sin(x))>>\nLaplace transform\n|Also See: invlaplace,ztrans,invztrans|",
			laplacian:"<<laplacian(exp(z)*cos(x*y),[x,y,z])>>\nReturns the Laplacian of the expression Xpr with respect to the list of variables",
			lcm:"<<lcm(6,4)>>\nReturns the lowest common multiple of 2 polynomials of several variables or of 2 integers or of 2 rationals.\n|Also See: gcd|",
			lcoeff:"<<lcoeff(-2*x^3+x^2+7*x)>>\nReturns the coefficient of the term of highest degree of a polynomial (l=leading).\n|Also See: tcoeff|",
			ldegree:"<<valuation(x^4+x^3)>>\nReturns the valuation (degree of the term of lowest degree) of the polynomial P .\n|Also See: degree,tcoeff|",
			length:"<<size([1,2,3])>>\nReturns the size of a list",
			lgcd:"<<lgcd([45,75,20,15])>>\nReturns the greatest common divisor of a list of polynomials or of integers\n|Also See: gcd,lcm,euler,content|",
			limit:"<<limit((n*tan(x)-tan(n*x))/(sin(n*x)-n*sin(x)),x,0)>>\nLimit of an expression at a limit point (a or +/-infinity)(d=-1 for limit inf and +1 for limit sup)\n|Also See: series,taylor,taux_accroissement|",
			lin:"<<lin(exp(x)^n)>>\nLinearization of exponentials\n|Also See: tlin,texpand|",
			linear_regression:"<<linear_regression([[0.0,0.0],[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]])>>\nReturns the coefficients a and b of y=a*x+b ;it is the best line approx the points where the coordinates are the rows of A (or the 2 lists).\n|Also See: polynomial_regression,power_regression,logistic_regression|",
			lineariser:"<<lin(exp(x)^n)>>\nLinearization of exponentials\n|Also See: tlin,texpand|",
			lineariser_trigo:"<<tlin(sin(x)^3)>>\nTrigonometric linearization\n|Also See: texpand,lin|",
			linsolve:"<<linsolve([x+y+z=1,x-y=2,2*x-z=3],[x,y,z])>>\nLinear equations system solver\n|Also See: solve,proot,simult,gaussjord,pivot,ref,conjugate_gradient|",
			ln:"<<ln(1)>>\nNatural logarithm or Option of the convert or convertir command (id trig2exp).\n|Also See: exp,convert,trig2exp,log10|",
			lncollect:"<<lncollect(ln(x)+2*ln(y))>>\nCollect logarithms. Applies ln(a)+n*ln(b)->ln(a*b^n) for integers n\n|Also See: texpand|",
			lnexpand:"<<lnexpand(ln(3*x))>>\nExpands logarithms.\n|Also See: texpand,expexpand,trigexpand|",
			log:"<<ln(1)>>\nNatural logarithm or Option of the convert or convertir command (id trig2exp).\n|Also See: exp,convert,trig2exp,log10|",
			log10:"<<log10(10)>>\nCommon logarithm (base 10)\n|Also See: alog10,ln|",
			logarithmic_regression:"<<logarithmic_regression([[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]])>>\nReturns the coefficients a and b of y=a*ln(x)+b : it is the best logarithm which approx the points where the coordinates are the rows of A (or the 2 lists).\n|Also See: exponential_regression|",
			logb:"<<logb(5,2)>>\nLogarithm of base b\n|Also See: log,log10|",
			logistic_regression:"<<logistic_regression(evalf([1,2,4,6,8,7,5]),1,2)>>\nReturns y,y',C,y'max,xmax,R : y is a logistic function (sol of y'/y=a*y+b), such that y(x0)=y0 and where [y'(x0),y'(x0+1)...] is the best approximation of L.\n|Also See: polynomial_regression,power_regression,linear_regression|",
			lu:"<<lu([[1,2],[3,4]])>>\nFor a numerical matrix A, returns p permutation, L and U such that PA=LU (P=permu2mat(p))\n|Also See: qr,cholesky,LU|",
			mRow:"<<mRow(12,[[1,2],[3,4],[5,6]],0)>>\nMultiplies the row n1 of the matrix A by Xpr.\n|Also See: rowAdd,mRowAdd|",
			mRowAdd:"<<mRowAdd(12,[[1,2],[3,4],[5,6]],0,2)>>\nMultiplies the row n1 of the matrix A by Xpr, then adds it to the row n2.\n|Also See: rowAdd,mRow|",
			makemat:"<<makemat((j,k)->>j+k,3,2)>1/(j+k+1),2,3);makemat(sqrt(2),2,3)>\nCreate a matrix\n|Also See: matrix|",
			markov:"<<markov([[0,0,1/2,0,1/2],[0,0,1,0,0],[1/4,1/4,0,1/4,1/4],[0,0,1/2,0,1/2],[0,0,0,0,1]])>>\nComputation of the proper elements of a Markov chain transition matrix M, returns the list of sequence of positive recurrent states, the list of corresponding invariant probabilities, the list of other strong connected components, the list of probability to end up in the sequence of recurrent states.\n|Also See: randmarkov,plotproba|",
			matpow:"<<matpow([[1,2],[3,4]],n)>>\nCalculates the n power of a matrix by jordanization\n|Also See: &^,^|",
			matrix:"<<matrix(2,3,(j,k)->>1/(j+k+1))>j+k);matrix(2,3,4)>\nMake a matrix m(j,k) with p rows and q cols, m(j,k)=f(j,k) or m(j,k)=a : the index start at 0 or 1 according to the mode (xcas or maple) (or option of apply)\n|Also See: makemat,makelist,apply|",
			matrix_norm:"<<matrix_norm([[1,2,3],[3,-9,6],[4,5,6]])>>\nMatrix norm   induced by l1norm or by l2norm or by linfinty norm.\n|Also See: l1norm,l2 norm,linfnorm,frobenius_norm|",
			max:"<<max(25,35)>>\nMaximum of elements of a sequence or a list of reals\n|Also See: min|",
			maxnorm:"<<maxnorm([1,2])>>\nNorm with the max of a vector (or of a matrix): maxnorm([x1,x2,..,xn])=max(|x1|,..,|xn|)\n|Also See: l2norm,l1norm|",
			mean:"<<mean([1,2,3])>>\nMean of a list with the second argument as pound or of the columns of a matrix.\n|Also See: stddev|",
			median:"<<median([1,2,3,5,10,4])>>\nReturns the median of a list with the second argument as pound or of the columns of a matrix.\n|Also See: quartiles|",
			member:"<<member(1,[4,3,1,2])>>\nTests if e is in the list or set l (=0 or k+1 with l[k]=e).\n|Also See: contains,est_element|",
			mid:"<<mid([0,1,2,3,4,5,6],2)>>\nReturns the extracted list of l with n elements (by default n=size(l)-d) and beginning at index d.\n|Also See: head,tail,left,right,subMat|",
			min:"<<min(25,35)>>\nMinimum of elements of a sequence or a list of reals.\n|Also See: max|",
			mkisom:"<<mkisom([1,2],1)>>\nMatrix of an isometry given by its proper elements\n|Also See: isom|",
			mksa:"<<mksa(1_N)>>\nConvert units in MKSA international unit system\n|Also See: convert,ufactor|",
			mod:"<< 15 mod 6>>\nInfixed operator which returns n mod p a number of ℤ/pℤ\n|Also See: smod,irem|",
			modgcd:"<<modgcd(x^4-1,(x-1)^2)>>\nGCD of 2 polynomials, with the modular algorithm.\n|Also See: gcd,heugcd,ezgcd,psrgcd|",
			mods:"<<smod(8,3)>>\nReturns the Euclidean symmetric remainder of two integers\n|Also See: irem,iquo,mod,fracmod|",
			moyal:"<<moyal(x^2+y^4,x^4-y^2,[x,y],5)>>\nMoyal product of 2 symbols",
			mult_conjugate:"<<mult_conjugate(sqrt(3)-sqrt(2))>>\nReturns the expression after multiplication by the conjugated quantity of the denominator (or of the numerator if no denominator).\n|Also See: mult_c_conjugate|",
			multinomial:"<<multinomial(10,[0.5,0.5],[3,7])>>\nReturns n!/(k0!*k1!*..;kj!)*(p0^k0*p1^k1..*pj^kj) (sum(p)=1 et sum(k)=n).\n|Also See: binomial,randvector,ranm|",
			nCr:"<<comb(4,2)>>\ncomb(n,r)=number of combinations of r objects taken among n : n!/(r!(n-r)!) (If n<0 comb(n,r)=n(n-1)..(n-r+1)/r!).\n|Also See: factorial,perm|",
			nDeriv:"<<nDeriv(f(x),x,h)>>\nReturns an approximation of the derivative number at a point: (Xpr(var+h)-Xpr(var-h))/(2*h) (by default h=0.001).\n|Also See: avgRC|",
			nInt:"<<romberg(exp(x^2),x,0,1)>>\nReturns the approximate value of integrate(f(x),x,a,b) by Romberg's method\n|Also See: integrate,gaussquad|",
			nPr:"<<perm(4,2)>>\nperm(n,p)=number of arrangements of p objects taken among n=n!/(n-p)!\n|Also See: comb,factorial|",
			nSolve:"<<nSolve(cos(x)=x,x)>>\nNumerical solution of an equation or a system of equation\n|Also See: solve,fsolve,csolve|",
			ncols:"<<coldim([[1,2,3],[4,5,6]])>>\nNumber of columns of a matrix.\n|Also See: rowdim|",
			negbinomial:"<<negbinomial(4,0,0.5)>>\nReturns comb(n+k-1,k)*p^k*(1-p)^n.\n|Also See: negbinomial_cdf,negbinomial_icdf,binomial|",
			negbinomial_cdf:"<<negbinomial_cdf(4,0.5,2)>>\nReturns Proba(X<=x) or Proba(x<=X<=y) when X follows the negbinomial(n,p) law.\n|Also See: negbinomial,negbinomial_icdf|",
			negbinomial_icdf:"<<negbinomial_icdf(4,0.5,0.68)>>\nReturns h such as Proba(X<=h)=t when X follows the negbinomial(n,p) law.\n|Also See: negbinomial,negbinomial_cdf|",
			newMat:"<<newMat(2,3)>>\nReturns the list with n rows and p columns, made with zeros.\n|Also See: newList,makemat|",
			newton:"<<newton(x^2-2,x)>>\nnewton(f(x),x,a,p)=one root of f(x) by Newton method beginning with a and p iterations (by default p=20).\n|Also See: rootof|",
			nextperm:"<<nextperm([0,2,1,3])>>\nReturns the next permutation with the lexicographic order.\n|Also See: prevperm,is_permu|",
			nextprime:"<<nextprime(9856989898990)>>\nNext prime or pseudo-prime after a given integer.\n|Also See: prevprime,is_prime,ithprime|",
			non_recursive_normal:"<<non_recursive_normal(sin(x+x)+sin(2*x)+x+x)>>\nSimplifies the expressions, but without simplification into no-rational expressions.\n|Also See: normal|",
			norm:"<<norm([1,2])>>\nReturns the l2 norm of a vector = sqrt(x1^2+x2^2+...xn^2) or matrix norm induced by l2 norm.\n|Also See: maxnorm,l1norm|",
			normal:"<<normal(2*x+y=1)>>\nSimplify the expression\n|Also See: simplify|",
			normal_cdf:"<<normal_cdf(1.96)>>\nReturns the probability that a Normal random variable is lower than x0 or between x0 and y0 (mu is the mean and sigma the standard deviation).\n|Also See: UTPN,normal_icdf,normald|",
			normal_icdf:"<<normal_icdf(0.95)>>\nReturns h such as the probability that a Normal random variable is lower than h is p (mu is the mean and sigma the standard deviation and 0<=p<=1).\n|Also See: normal_cdf,normald|",
			normald:"<<normald(1)>>\nReturns the density of probability of the Normal law (mu is the mean and sigma the standard deviation).\n|Also See: normal_cdf,normal_icdf,randvector,ranm|",
			normald_cdf:"<<normal_cdf(1.96)>>\nReturns the probability that a Normal random variable is lower than x0 or between x0 and y0 (mu is the mean and sigma the standard deviation).\n|Also See: UTPN,normal_icdf,normald|",
			normald_icdf:"<<normal_icdf(0.95)>>\nReturns h such as the probability that a Normal random variable is lower than h is p (mu is the mean and sigma the standard deviation and 0<=p<=1).\n|Also See: normal_cdf,normald|",
			normalize:"<<normalize(3+4*i)>>\nReturns the vector divided by its l2norm. It is also an option for plotfiefd.\n|Also See: l2norm|",
			normalt:"<<normalt([10,30],.5,.02,'!=',0.1)>>\nZ-Test/normal law: arg1=[success,trial] or [mean,sample size] or data, arg2=proportion or data, arg3 optional if data=sigma, arg4 alternative '!=' or '>' or '<', arg5 optional alpha confidence level.\n|Also See: studentt,chisquaret,kolmogorovt|",
			not:"<<not(b > 0)>>\nReturns the logical inverse of the argument\n|Also See: or,and,xor|",
			nprimes:"<<nprimes(20)>>\nCount the number of primes less than n.\n|Also See: ithprime,prevprime,nextprime,isprime|",
			nrows:"<<rowdim([[1,2,3],[4,5,6]])>>\nNumber of rows of a matrix.\n|Also See: ncols|",
			numer:"<<numer(25/15)>>\nReturns the numerator of the simplified fraction.\n|Also See: getNum,getDenom,denom,f2nd|",
			odd:"<<odd(6)>>\nReturns 1 if the integer is odd, else returns 0.\n|Also See: even|",
			odesolve:"<<odesolve(sin(t*y),[t,y],[0,1],2)>>sin(t*y),1);odesolve(0..pi,(t,v)->{[-v[1],v[0]]},[0,1]);odesolve(sin(t*y),t=0..2,y,1,tstep=0.5);odesolve(sin(t*y),t=0..2,y,1,tstep=0.5,curve)>\nodesolve(f(t,y),[t,y],[t0,y0],t1)=odesolve(t0..t1,f,y0)=y(t1) for y approx sol of y'=f(t,y) and y(t0)=y0 with y=vector for systems.\n|Also See: plotode,plotfield,interactive_plotode,desolve|",
			order_size:"<<order_size(x)>>\nRemainder (O term) of a series expansion: limit(x^a*order_size(x),x=0)=0 if a>0\n|Also See: series|",
			p1oc2:"<<p1oc2([0,2,1],[2,1,3])>>\nReturns the permutation product of p1 and c2\n|Also See: c1op2,p1op2|",
			p1op2:"<<p1op2([0,2,1],[1,0,3,2])>>\nReturns the permutation product of p1 and p2\n|Also See: c1op2,p1oc2|",
			pa2b2:"<<pa2b2(17)>>\nReturns [a,b] such as a^2+b^2=n (for n prime and n=1 (mod 4))",
			pade:"<<pade(exp(x),x,10,6)>>\nPade approximation P/Q=Xpr mod x^(n+1) or mod N with degree(P)<p.\n|Also See: taylor,series|",
			part:"<<part(sin(x)+cos(x),1)>>\nReturns the n-th subexpression of the expression.",
			partfrac:"<<partfrac(x/(4-x^2))>>\nPerforms partial fraction decomposition on a fraction or Option of the convert or convertir command (id partfrac).\n|Also See: factor,normal,convert|",
			pcar:"<<pcar([[1,2],[3,4]])>>\nList of the coefficients of the characteristic polynomial of a matrix or characteristic polynomial of a matrix with the second argument as variable.\n|Also See: jordan,egv,egvl,companion,rat_jordan,pmin|",
			pcar_hessenberg:"<<pcar_hessenberg([[1,2],[3,4]])>>\nCharacteristic polynomial of a matrix by the Hessenberg method (if the coefficients are in a finite field)\n|Also See: jordan,pcar,egvl|",
			pcoef:"<<pcoeff([1,0,0,0,1])>>\nReturns the polynomial coefficients having the roots specified as argument\n|Also See: proot,peval|",
			pcoeff:"<<pcoeff([1,0,0,0,1])>>\nReturns the polynomial coefficients having the roots specified as argument\n|Also See: proot,peval|",
			perm:"<<perm(4,2)>>\nperm(n,p)=number of arrangements of p objects taken among n=n!/(n-p)!\n|Also See: comb,factorial|",
			perminv:"<<perminv([1,3,2,4,0])>>\nReturns the inverse permutation of the permutation a.\n|Also See: cycleinv|",
			permu2mat:"<<permu2mat([1,3,2,4,0])>>\nReturns the matrix where the lines of the identity matrix are permuted with the permutation p.",
			permuorder:"<<permuorder([1,3,2,4,0])>>\nReturns the order of the permutation a.\n|Also See: cycles2permu|",
			peval:"<<peval([1,0,-2],1)>>\nEvaluates at a point x0, a polynomial given by its coefficients\n|Also See: proot,pcoeff|",
			pivot:"<<pivot([[1,2],[3,4],[5,6]],0,1)>>\nReturns the matrix get from A creating zeros in the column nc, by the method of Gauss-Jordan with the element A[nl,nc] as pivot.\n|Also See: gaussjord,linsolve|",
			pmin:"<<pmin([[1,0],[0,1]])>>\nReturns the minimal polynomial of A\n|Also See: pcar,jordan|",
			poisson:"<<poisson(0.5,2)>>\nReturns exp(-mu)*mu^k/k!\n|Also See: poisson_cdf,poisson_icdf,randvector,ranm|",
			poisson_cdf:"<<poisson_cdf(4.0,7)>>\nReturns Proba(X<=x) when X follows the Poisson law with mu as mean.\n|Also See: poisson,poisson_icdf|",
			poisson_icdf:"<<poisson_icdf(4.0,0.95)>>\nReturns h such as Proba(X<=h)=p when X follows the Poisson law with mu as parameter.\n|Also See: poisson,poisson_cdf|",
			poly2symb:"<<poly2symb([1,2,3])>>\nGives the polynomial (or its value) : the first argument is the vector of coefficients and the second argument is the variable (by default x).\n|Also See: e2r,symb2poly|",
			polyEval:"<<peval([1,0,-2],1)>>\nEvaluates at a point x0, a polynomial given by its coefficients\n|Also See: proot,pcoeff|",
			polynomial_regression:"<<polynomial_regression([[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]],3)>>\nReturns the coefficients (an,...a1,a0) of y=an*x^n+..a1x+a0) : it is the best polynomial which approx the points where the coordinates are the rows of A (or the 2 lists) (n is the 2nd argument).\n|Also See: linear_regression,power_regression|",
			poslbdLMQ:"<<poslbdLMQ(x^3-7*x+7)>>\nReturns a lower bound on the values of the positive roots of P. Akritas-Strzebonski-Vigklas' Local Max Quadratic (LMQ) method is used.\n|Also See: posubLMQ,VAS_positive,realroot|",
			posubLMQ:"<<posubLMQ(x^3-7*x+7)>>\nReturns an upper bound on the values of the positive roots of P. Akritas-Strzebonski-Vigklas' Local Max Quadratic (LMQ) method is used.\n|Also See: poslbdLMQ,VAS_positive,realroot|",
			potential:"<<potential([2*x*y+3,x^2-4*z,-4*y],[x,y,z])>>\nReturns U such as derive(U,Vector_of_variable)=V\n|Also See: derive,vpotential|",
			pow:"<<pow(17,452)>>\nComputes a^n (fast algorithm)\n|Also See: ^,powmod|",
			pow2exp:"<<pow2exp(a^b)>>\nConverts powers to exponentials.\n|Also See: exp2pow|",
			power_regression:"<<power_regression([[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]])>>\nReturns the coefficients (m,b) of y=b*x^m : it is the best monomial which approx the points where the coordinates are the rows of A (or the 2 lists).\n|Also See: polynomial_regression,linear_regressiont|",
			powermod:"<<powmod(17,452,19)>>\nComputes a^n modulo p or modulo p,P(x) (fast algorithm)\n|Also See: pow,^|",
			powexpand:"<<powexpand(2^(x+y))>>\nExpands the expression in function of the exponent.",
			powmod:"<<powmod(17,452,19)>>\nComputes a^n modulo p or modulo p,P(x) (fast algorithm)\n|Also See: pow,^|",
			prepend:"<<prepend([1,2],3)>>\nPuts the element at the beginning of the list\n|Also See: append,concat|",
			preval:"<<preval(x^2-2,2,3)>>\nReturns F(b)-F(a)\n|Also See: subst|",
			prevprime:"<<prevprime(9856989898999)>>\nPrevious prime or pseudo-prime before a given integer a.\n|Also See: nextprime,is_prime,ithprime|",
			primpart:"<<primpart(2x^2+10x+6)>>\nReturns the polynomial P divided by the gcd of its coefficients.\n|Also See: content|",
			product:"<<product(n,n,1,10,2)>>\nMultiplicates the values of the expression when the variable go from a to b with a step p (product(expression,var,begin,end,step) by default p=1) or product of the elements of a list or product element by element of 2 lists or matrix.\n|Also See: sum|",
			proot:"<<proot([1,0,-2])>>\nReturns all computed roots of a polynomial given by its coefficients (may not work if roots are not simple).\n|Also See: pcoeff,peval,realroot,complexroot,rationalroot,crationalroot|",
			propfrac:"<<propfrac(28/12)>>\nSimplifies and writes the fraction (or rational fraction) A/B as Q+R/B with R<B (or deg(R)<deg(B))\n|Also See: partfrac|",
			psrgcd:"<<psrgcd(x^4-1,(x-1)^2)>>\nGCD of 2 polynomials, with the sub resultant algorithm.\n|Also See: gcd,modgcd,ezgcd,heugcd|",
			ptayl:"<<ptayl(x^2+2*x+1,1)>>\nReturns the Taylor polynomial Q such as P(x)=Q(x-a)\n|Also See: series,taylor|",
			q2a:"<<q2a(x^2+2*x*y+2*y^2,[x,y])>>\nq2a(q(x,y),[x,y])=the symmetric matrix associated to the quadratic form q\n|Also See: a2q|",
			qr:"<<qr([[1,2],[3,4]])>>\nFor a numerical matrix A, returns R (right) such that A=QR and Q orthogonal\n|Also See: lu|",
			quantile:"<<quantile([0,1,3,4,2,5,6],0.25)>>\nReturns the quantile of the elements of l corresponding to p (0<p<1).\n|Also See: quartile1,median,quartile3|",
			quartile1:"<<quartile1([1,2,3,5,10,4])>>\nReturns the 1st quartile of the elements (or of the columns) of its argument.\n|Also See: quantile,quartiles|",
			quartile3:"<<quartile3([1,2,3,5,10,4])>>\nReturns the 3rd quartile of the elements (or of the columns) of its argument.\n|Also See: quartiles,quantile|",
			quartiles:"<<quartiles([1,2,3,5,10,4])>>\nMin,1st quartile,the median,3rd quartile, max of the elements (or of the columns) of its argument.\n|Also See: boxwhisker,quantile,mean|",
			quorem:"<<quorem([1,2,3,4],[-1,2])>>\nEuclidean quotient and remainder of 2 polynomials\n|Also See: rem,quo,iquorem|",
			r2e:"<<poly2symb([1,2,3])>>\nGives the polynomial (or its value) : the first argument is the vector of coefficients and the second argument is the variable (by default x).\n|Also See: e2r,symb2poly|",
			rand:"<<rand(4)>>\na random integer with uniform distribution in 0..n-1 (rand() => real in [0,1[) or rand(n,b1,b2) => n integers between b1 and b2\n|Also See: srand,randpoly,ranm,randvector,hasard|",
			randMat:"<<ranm(3,2)>>\nReturns a list of size n or a n*m matrix that contains random integers in the range -99 through 99 with uniform distribution.\n|Also SeE: idn,randPoly,rand,randvector|",
			randNorm:"<<randnorm(0,1)>>\nReturns a random real with normal distribution N(mu,sigma)\n|Also See: rand,randpoly,ranm,randvector,randexp,randbinomial,randpoisson,randgeometric,randmultinomial|",
			randPoly:"<<randpoly(5)>>\nReturns a polynomial of variable var (or x), of degree n and where the coefficients are random integers in the range -99 through 99 with uniform distribution or according to a law\n|Also See: ranm,randvector|",
			randbinomial:"<<randbinomial(10,0.4)>>\nReturns a random integer with binomial distribution B(n,p) i.e. the number of success for n independant tests where for each test, the success probability is p.\n|Also See: rand,randpoly,ranm,randvector,randexp,randnorm,randpoisson,randgeometric,randmultinomial|",
			randchisquare:"<<randchisquare(5)>>\nReturns a random integer with chi^2 distribution, χ^2(n).\n|Also See: rand,randpoly,ranm,randvector,randexp,randbinomial,randnorm,randgeometric,randmultinomial|",
			randexp:"<<randexp(1)>>\nReturns a random real according to the exponential distribution of parameter a>0.\n|Also See: rand,randpoly,randnorm,randvector|",
			randfisher:"<<randfisher(5,2)>>\nReturns a random integer with Fisher-Snedecor distribution F(n,m).\n|Also See: rand,randpoly,ranm,randvector,randexp,randbinomial,randnorm,randgeometric,randmultinomial|",
			randgeometric:"<<randgeometric(0.4)>>\nReturns a random integer following geometric distribution of parameter p\n|Also See: rand,randpoly,ranm,randvector,randexp,randnorm,randpoisson,randbinomial,randmultinomial|",
			randmarkov:"<<randmarkov([[0,0,1/2,0,1/2],[0,0,1,0,0],[1/4,1/4,0,1/4,1/4],[0,0,1/2,0,1/2],[0,0,0,0,1]],2,20)>>\nReturns a random sequence of n states (Markov chain) starting from i0, with probability transition matrix M, or returns a stochastic matrix with p recurrent loops v=[n1,..,np] and i0 transient states\n|Also See: markov,plotproba|",
			randmultinomial:"<<randmultinomial([1/2,1/3,1/6])>>\nReturns a random index or list element according to a multinomial distribution probability list P.\n|Also See: rand,randpoly,ranm,randvector|",
			randnorm:"<<randnorm(0,1)>>\nReturns a random real with normal distribution N(mu,sigma)\n|Also See: rand,randpoly,ranm,randvector,randexp,randbinomial,randpoisson,randgeometric,randmultinomial|",
			randperm:"<<randperm(4)>>\nReturns a random permutation of [0,1,2,..,n-1]\n|Also See: permu2cycles,is_permu|",
			randpoisson:"<<randpoisson(5.4)>>\nReturns a random integer with poisson distribution P(λ).\n|Also See: rand,randpoly,ranm,randvector,randexp,randbinomial,randnorm,randgeometric,randmultinomial|",
			randpoly:"<<randpoly(5)>>\nReturns a polynomial of variable var (or x), of degree n and where the coefficients are random integers in the range -99 through 99 with uniform distribution or according to a law\n|Also See: ranm,randvector|",
			randseed:"<<srand(12)>>\nsrand returns an integer and initialize the sequence of random numbers.\n|Also See: RandSeed|",
			randstudent:"<<randstudent(5)>>\nReturns a random integer with Student distribution S(n).\n|Also See: rand,randpoly,ranm,randvector,randexp,randbinomial,randnorm,randgeometric,randmultinomial|",
			randvector:"<<randvector(3)>>\nReturns a list of size n that contains random integers in the range -99 through 99 (or in 0..m-1) with uniform distribution or contains random numbers according to the law put between quote\n|Also See: idn,randPoly,rand,ranm|",
			rank:"<<rank([[1,1,2],[2,1,3],[3,1,4]])>>\nReturns the rank of the matrix\n|Also See: det,image|",
			ranv:"<<randvector(3)>>\nReturns a list of size n that contains random integers in the range -99 through 99 (or in 0..m-1) with uniform distribution or contains random numbers according to the law put between quote\n|Also See: idn,randPoly,rand,ranm|",
			rat_jordan:"<<rat_jordan([[0,2],[1,0]])>>\nReturns the list made by the matrix of passage and the rational Jordan form of a matrix.\n|Also See: egv,egvl,jordan,companion|",
			rationalroot:"<<rationalroot(2*x^3-9*x^2+13*x-6)>>\nReturns the list of rational roots of P without indicating the multiplicity.\n|Also See: proot,froot,complexroot,realroot,crationalroot|",
			ratnormal:"<<ratnormal((x^2-1)/(x^3-1))>>\nRewrite as an irreducible rational fraction.\n|Also See: normal,simplify,factor,expand|",
			re:"<<re(1+2*i)>>\nReturns the real part of a complex number\n|Also See: im,conj|",
			real:"<<re(1+2*i)>>\nReturns the real part of a complex number\n|Also See: im,conj|",
			realroot:"<<realroot(x^3-7*x+7)>>\nReturns the list of intervals of length <=l containing the real roots of P inside a..b with their multiplicity. By default the Vincent-Akritas-Strzebonski (VAS) method is used. realroot(sturm,P) uses Sturm's method.\n|Also See: proot,froot,complexroot,rationalroot,crationalroot,sturmab,VAS|",
			redim:"<<redim([[1,2,3],[3,-9,6],[4,5,6]],1,2)>>\nShrink or enlarge with 0 a matrix (or vector) according to the new n1 and n2 dimensions\n|Also See: replace|",
			reduced_conic:"<<reduced_conic(x^2+2*x-2*y+1)>>\nReturns the origin and the matrix of a base in which the conic given by its equation, is reduced, 0 or 1 (0 if the conic is degenerated) and the equation of the conic in this base and also its parametric equation.\n|Also See: gauss,conic|",
			reduced_quadric:"<<reduced_quadric(4*x^2+y^2+z^2-4*x*y+4*x*z-2*y*z+8*x-4*y+4*z+2)>>\nReturns the origin and the matrix of a basis in which the quadric (given by its equation) is reduced, the list of its eigenvalues, the equation of the quadric in this basis and its parametric equation.\n|Also See: gauss,quadric|",
			ref:"<<ref([[3,1,-2],[3,2,2]])>>\nReduction of Gauss of AX=b (M=A|(-b))\n|Also See: rref,det|",
			regroup:"<<regroup(x+3*x+5*4/x)>>\nCollect terms in an expression\n|Also See: simplify,normal|",
			rem:"<<rem([1,2,3,4],[-1,2])>>\nEuclidean remainder of 2 polynomials\n|Also See: quo,quorem,Rem,irem|",
			remove:"<<remove(x->>x>=5,[1,2,6,7])>\nRemove the occurrences e of l or the elements e such that f(e)=true.\n|Also See: select,suppress|",
			reorder:"<<-2>>\nReorders the variables in E according to the order of the 2nd argument",
			replace:"<<replace([[1,2,3],[3,-9,6],[4,5,6]],[1,0],[[7,8],[9,0]])>>\nReplace part of matrix A from indices n1,n2 with the values of matrix B.\n|Also See: redim|",
			residue:"<<residue(1/z,z,0)>>\nReturns the residue in a of the expression with v as variable.\n|Also See: series|",
			resultant:"<<resultant(x^2-1,x^3-1,x)>>\nResultant of two polynomials\n|Also See: sylvester,gcd|",
			reverse_rsolve:"<<reverse_rsolve([1,-1,3,3])>>\nIf v=[v_0 ... v_(2n-1)], return [b_n,...,b_0] such that b_n*v_{n+k}+...+b_0*v_k=0 for k=0..n-1.\n|Also See: rsolve|",
			revert:"<<revert(x+x^2+x^4)>>\nReturns the revert expansion of a series expansion at 0.\n|Also See: series|",
			revlist:"<<revlist([1,2,3])>>\nReturns the list l in reverse order.",
			risch:"<<risch(ln(x),x)>>\nReturns a primitive of the expression calculated with the Risch algorithm.\n|Also See: int|",
			romberg:"<<romberg(exp(x^2),x,0,1)>>\nReturns the approximate value of integrate(f(x),x,a,b) by Romberg's method\n|Also See: integrate,gaussquad|",
			rombergm:"<< area(x^2,x=0..1,5,simpson)>>\nOption of the area command\n|Also See: area|",
			rombergt:"<< area(x^2,x=0..1,5,simpson)>>\nOption of the area command\n|Also See: area|",
			root:"<<root(3,2)>>\nReturns b^(1/a) (root(2,3)=sqrt(3)).",
			rootof:"<< normal(1/rootof([1,0],[1,0,10,0,1]))>>\nPolynomial in terms of a root of an irreducible polynomial on Q. Returns P(a) with a the greatest root of Q.",
			roots:"<<roots(t^3-1,t)>>\nReturns a matrix having 2 columns and where the rows are the roots of the polynomial with their multiplicity (for 1 variable).\n|Also See: proot,cZeros|",
			rotate:"<<rotate([0,1,2,3],2)>>\nReturns the list where the last element [or the tail beginning with the n-th element] is the first element (by default n=-1).\n|Also See: tail,mid,shift|",
			rotation:"<<rotation(point(1+i),pi/2,point(i))>>\nrotation(B,a1,A)(resp rotation(d,a1,A)) is the transformed of A by rotation of center B (resp of axis d) and of angle a1.\n|Also See: translation,reflection|",
			round:"<<round(2.5)>>\nRounds the real or complex as the nearest integer (resp the nearest decimal number) or as nearest element of ℤ[i], (resp with n decimals).\n|Also See: floor,ceil|",
			row:"<<row([[1,2,3],[4,5,6],[7,8,9]],1)>>\nReturns the row n or the sequence of the rows n1..n2 of the matrix A, or optional argument of count,count_eq,count_inf,count_sup.\n|Also See: col,count,count_eq,count_inf,count_sup|",
			rowAdd:"<<rowAdd([[1,2],[3,4],[5,6]],1,2)>>\nReturns the matrix get from A by replacing the n2-th row by the sum of the n1-th and n2-th rows.\n|Also See: rowSwap|",
			rowDim:"<<rowdim([[1,2,3],[4,5,6]])>>\nNumber of rows of a matrix.\n|Also See: ncols|",
			rowNorm:"<<rowNorm([[1,2],[3,-4]])>>\nReturns the max of the l1_norm of the rows of a matrix: rowNorm(a_{j,k})=max_j(sum_k(|a_{j,k}|)).\n|Also See: norm|",
			rowSwap:"<<rowSwap([[1,2],[3,4],[5,6]],1,2)>>\nReturns the matrix get from A by swapping the n1-th row and the n2-th row.\n|Also See: rowAdd,colSwap|",
			rowdim:"<<rowdim([[1,2,3],[4,5,6]])>>\nNumber of rows of a matrix.\n|Also See: ncols|",
			rownorm:"<<rowNorm([[1,2],[3,-4]])>>\nReturns the max of the l1_norm of the rows of a matrix: rowNorm(a_{j,k})=max_j(sum_k(|a_{j,k}|)).\n|Also See: norm|",
			rowspace:"<<rowspace([[1,2,3],[1,2,3],[1,2,4],[1,2,5]])>>\nReturns a matrix where the rows are a basis of the vector space generated with the rows of the matrix A [d is the dimension of this space].\n|Also See: colspace|",
			rowswap:"<<rowSwap([[1,2],[3,4],[5,6]],1,2)>>\nReturns the matrix get from A by swapping the n1-th row and the n2-th row.\n|Also See: rowAdd,colSwap|",
			rref:"<<rref([[3,1,-2],[3,2,2]])>>\nRow reduction to echelon form of AX=b (M=A|(-b)) [Reduction on columns 0..k-1]\n|Also See: ker,image,det,Rref,pivot,ref,keep_pivot|",
			rsolve:"<<rsolve(u(n+1)=2*u(n)+n,u(n),u(0)=1)>>\nGives the value of a recurrent sequence or of a system of recurrent sequences.\n|Also See: seqsolve,plotseq,tableseq,reverse_rsolve|",
			same:"<<same(a,b)>>\nEquality test",
			scalarProduct:"<<dot([1,2],[3,4])>>\nScalar product.\n|Also See: *,cross,.*,hadamard|",
			scale:"<<mRow(12,[[1,2],[3,4],[5,6]],0)>>\nMultiplies the row n1 of the matrix A by Xpr.\n|Also See: rowAdd,mRowAdd|",
			scaleadd:"<<mRowAdd(12,[[1,2],[3,4],[5,6]],0,2)>>\nMultiplies the row n1 of the matrix A by Xpr, then adds it to the row n2.\n|Also See: rowAdd,mRow|",
			sec:"<<sec(pi/3)>>\nSecant: sec(x)=1/cos(x)\n|Also See: cos,asec|",
			secant_solver:"<< fsolve(cos(x)=x,x,0..1,bisection_solver)>>\nArgument for fsolve giving the method for solving an numerical equation.\n|Also See: fsolve|",
			select:"<<select(x->>x>=5,[1,2,6,7])>\nSelects the elements e of l such that f(e)=true\n|Also See: remove|",
			semi_augment:"<<semi_augment([[68,-21],[56,59],[1,2]],[[68,-21],[56,59]])>>\nReturns a matrix made with A and B, with n1+n2 rows and p columns if dim(A)=[n1,p] and dim(B)=[n2,p].\n|Also See: augment|",
			seq:"<<seq(t,4)>>\nReturns the sequence (2 or 3 arg) or the list (4 or 5 arg) obtained when var go from a to b (step p) in Xpr (or the Xpr is repeated n times).\n|Also See: $,makelist|",
			seqsolve:"<<seqsolve(2x+n,[x,n],1)>>\nGives the value of a recurrent sequence (u_{n+1}=f(u_n) or u_{n+2}=f(,u_n,u_{n+1}...) or of a system of recurrent sequences.\n|Also See: rsolve,plotseq,tableseq|",
			series:"<<series(sin(x)/x,x=0)>>\nSeries expansion at finite or infinite points\n|Also See: limit,taylor,pad,convert,truncate|",
			shift:"<<shift([0,1,2,3],2)>>\nReturns the list where the last element [or the tail beginning with the n-th element] is the first element and then complete with undef (by default n=-1).\n|Also See: rotate,tail|",
			shift_phase:"<<shift_phase(sin(x))>>\nshift_phase returns the expressions where the phase of the evaluated trigonometric expressions is increased by pi/2.\n|Also See: series|",
			sign:"<<sign(-4)>>\nReturns the sign (-1,0,+1) of its argument\n|Also See: abs|",
			similarity:"<<similarity(1+i,2,pi/3,i)>>\nsimilarity(B,k,a1,A)=transformed of A in the similarity (center B or axis d, coeff k,angle a1) (or also homothety(B,k*exp(i*a1),A)).\n|Also See: homothety|",
			simp2:"<<simp2(12,18)>>\nReturns the list [A/gcd(A,B),B/gcd(A,B)]\n|Also See: gcd|",
			simplex_reduce:"<<simplex_reduce([[3,2,2],[1,1,1]],[3,4],[1,2,3])>>\nReduction by simplex algorithm to find max(c.x) under A.x<=b and x>=0, b>=0. Returns the maximum, the augmented solution x and the reduced matrix. Accepts also [[A|I|b],[-c|*|0]] as argument.",
			simplify:"<<simplify(4*atan(1/5)-atan(1/239))>>\nSimplifies an expression\n|Also See: normal|",
			simult:"<<simult([[3,1],[3,2]],[[-2],[2]])>>\nReturns the matrix where the column of index k is solution of A*X=column of index k of B (=B[0..nr-1,k..k] with nr=number of rows of B).\n|Also See: rref,linsolve|",
			sin:"<<sin(0)>>\nSine or Option of the convert or convertir command (id trigsin).\n|Also See: asin,convert,trigsin|",
			sin2costan:"<<sin2costan(sin(x))>>\nReplaces sin(x) by cos(x)*tan(x) in the argument\n|Also See: tan2sincos,cos2sintan,tan2sincos2,tan2cossin2|",
			sincos:"<<sincos(exp(i*x))>>\nTransforms the complex exponential into sine and cosine (id exp2trig) or Option of the convert or convertir command (id sincos).\n|Also See: trig2trig,trig2exp,atrig2ln,convert|",
			sinh:"<<sinh(0)>>\nHyperbolic sine\n|Also See: asinh|",
			size:"<<size([1,2,3])>>\nReturns the size of a list, a string or a sequence\n|Also See: sizes,dim|",
			sizes:"<<sizes([[1,2,3],[1,2],[1]])>>\nReturns the list of sizes of a list of lists\n|Also See: size,dim|",
			slope:"<<slope(line(1,2i))>>\nReturns the slope of the line defined in the argument or is an attribute of line.\n|Also See: line,tangent,LinTan,slopeatraw,slopeat|",
			smod:"<<smod(8,3)>>\nReturns the Euclidean symmetric remainder of two integers\n|Also See: irem,iquo,mod,fracmod|",
			snedecor:"<<fisher(4,10,2.1)>>\nReturns the density of probability of the Fisher-Snedecor law (n and m are the numbers of degrees of freedom).\n|Also See: fisher_cdf,fisher_icdf,randvector,ranm|",
			snedecor_cdf:"<<fisher_cdf(4,4,2.1)>>\nReturns the probability that a Fisher-Snedecor random variable is lower than x0 (n and m are the numbers of degrees of freedom).\n|Also See: UTPF,fisher_icdf,fisherd|",
			snedecor_icdf:"<<fisher_icdf(4,10,0.95)>>\nReturns h such as the probability that a Fisher-Snedecor random variable is lower than h is p (n and m are the numbers of degrees of freedom and 0<=p<=1).\n|Also See: fisher_cdf,fisherd|",
			snedecord:"<<fisher(4,10,2.1)>>\nReturns the density of probability of the Fisher-Snedecor law (n and m are the numbers of degrees of freedom).\n|Also See: fisher_cdf,fisher_icdf,randvector,ranm|",
			snedecord_cdf:"<<fisher_cdf(4,4,2.1)>>\nReturns the probability that a Fisher-Snedecor random variable is lower than x0 (n and m are the numbers of degrees of freedom).\n|Also See: UTPF,fisher_icdf,fisherd|",
			snedecord_icdf:"<<fisher_icdf(4,10,0.95)>>\nReturns h such as the probability that a Fisher-Snedecor random variable is lower than h is p (n and m are the numbers of degrees of freedom and 0<=p<=1).\n|Also See: fisher_cdf,fisherd|",
			solve:"<<solve(x^2-3=1)>>\nSolves a (or a set of) polynomial equation\n|Also See: linsolve,proot,fsolve,csolve,nSolve|",
			sort:"<<sort([3,2,2,4,1,0])>>x>y);sort([[1,2],[2,3],[4,3]],(x,y)->when(x[1]==y[1],x[0]>y[0],x[1]>y[1]));sort(y*x*2+x*y)>\nReturns the sorted list (or sequence) with increasing order according with the second argument or sort and collect equal terms in sums and products.\n|Also See: SortA,SortD|",
			split:"<<split(x^3*y^2-y^2+x^3-1,[x,y])>>\nSplits the two variables var1,var2 of the expression Xpr (without denominator) or returns [0]\n|Also See: factor|",
			sqrt:"<<sqrt(50)>>\nSquare root\n|Also See: surd,^|",
			srand:"<<srand(12)>>\nsrand returns an integer and initialize the sequence of random numbers.\n|Also See: RandSeed|",
			stdDev:"<<stddevp([1,2,3])>>\nReturns the population standard device of the elements of its argument with the second argument as pound.\n|Also See: mean,stddev|",
			stddev:"<<stddev([1,2,3])>>\nReturns the standard device of the elements of its argument with the second argument as pound or the list of standard devices of the columns of a matrix.\n|Also See: mean,variance,stddevp|",
			stddevp:"<<stddevp([1,2,3])>>\nReturns the population standard device of the elements of its argument with the second argument as pound.\n|Also See: mean,stddev|",
			student:"<<student(3,5.2)>>\nReturns the density of probability of the Student law (n is the number of degrees of freedom).\n|Also See: student_cdf,student_icdf|",
			student_cdf:"<<student_cdf(3,2.35)>>\nReturns the probability that a Student random variable is lower than x0 (n is the number of degrees of freedom).\n|Also See: UTPT,student_icdf,studentd|",
			student_icdf:"<<student_icdf(3,0.95)>>\nReturns h such as the probability that a Student random variable is lower than h is p (n is the number of degrees of freedom and 0<=p<=1).\n|Also See: student_cdf,studentd|",
			studentd:"<<student(3,5.2)>>\nReturns the density of probability of the Student law (n is the number of degrees of freedom).\n|Also See: student_cdf,student_icdf|",
			studentt:"<<studentt([10,20],.5,.02,'!=',0.1)>>\nT-Test/Student law: arg1=[success,trial] or [mean,sample size] or data, arg2=proportion or data, arg3 optional if data=sigma, arg4 alternative '!=' or '>' or '<', arg5 optional alpha confidence level.\n|Also See: normalt,chisquaret,kolmogorovt|",
			sturm:"<<sturm(x^3-1,x)>>\nSturm sequence corresponding to a polynomial or number of sign changes of this polynomial in ]a;b].\n|Also See: sturmseq,sturmab|",
			sturmab:"<<sturmab(x^3-1,x,-2,5)>>\nNumber of sign changes of a polynomial in ]a;b] or of complex roots in a..b if a or b is non-real.\n|Also See: sturm,sturmseq,realroot|",
			sturmseq:"<<sturmseq(x^3-1,x)>>\nSturm sequence corresponding to a polynomial or to a rational fraction.\n|Also See: sturm,sturmab|",
			subMat:"<<subMat([[1,2],[3,4],[5,6]],1,0,2,1)>>\nExtracts a sub matrix with first element=A[n1,n2] and last element=A[n3,n4].\n|Also See: mid|",
			subsop:"<<subsop([0,1,2,3,4],2=sqrt(2)+1)>>\nReplaces in the list (or the matrix) the element of index n with the expression",
			subst:"<<subst(1/(4+x^2),x=2)>>\nSubstitutes a value for a variable in an expression.\n|Also See: eval,algsubs,subs|",
			sum:"<<sum(1/n^2,n,1,17)>>\nDiscrete sum (with 2 or 4 arguments return then sum from a to b if a<=b or of the opposite of the sum from b+1 to a-1 if a>b+1 or 0 if a=b+1) or the discrete primitive or sum of the elements of a list or a sequence\n|Also See: +|",
			sum_riemann:"<<sum_riemann(1/(n+k),[n,k])>>\nReturns an equivalent when var1=+infinity of the sum of Xpr(var1,var2) for var2 from 1 to var1 when the sum is a sum of Riemann",
			suppress:"<<suppress([0,1,2,3],2)>>\nReturns l without the element of index n\n|Also See: tail,mid,remove|",
			svd:"<<svd([[1,2],[3,4]])>>\nFor a square numerical real matrix A, returns U orthogonal, S vector of singular values, Q orthogonal such that A=U*diag(S)*tran(Q)",
			swapcol:"<<colSwap([[1,2],[3,4],[5,6]],1,2)>>\nReturns the matrix get from A by swapping the n1-th column and the n2-th column.\n|Also See: rowSwap|",
			swaprow:"<<rowSwap([[1,2],[3,4],[5,6]],1,2)>>\nReturns the matrix get from A by swapping the n1-th row and the n2-th row.\n|Also See: rowAdd,colSwap|",
			sylvester:"<<sylvester(x^2-1,x^3-1,x)>>\nSylvester matrix of two polynomials\n|Also See: resultant|",
			symb2poly:"<<symb2poly(x*3+2.1)>>\nReturns the coefficients of a polynomial with respect to the 2nd argument or if the second argument is a list the internal format of the polynomial.\n|Also See: poly2symb,r2e|",
			syst2mat:"<<syst2mat([x-y=1,x+2*y],[x,y])>>\nReturns the matrix M=A|(-b) associate to the system Y=AX+b\n|Also See: linsolve,rref|",
			tCollect:"<<tcollect(sin(x)+cos(x))>>\nCollect trigonometric expressions\n|Also See: texpand,tlin|",
			tExpand:"<<texpand(sin(2*x)+exp(x+y))>>\nExpand transcendental expressions\n|Also See: tcollect,tlin,lin|",
			tail:"<<tail([3,2,4,1,0])>>\nReturns the list (or sequence or string) without its first element\n|Also See: head,mid,left,right,back|",
			tan:"<<tan(0)>>\nTangent or Option of the convert or convertir command (id halftan)\n|Also See: atan or Opt,convert,halftan|",
			tan2cossin2:"<<tan2cossin2(tan(x))>>\nReplaces tan(x) by (1-cos(2*x))/sin(2*x) in the argument\n|Also See: tan2sincos2,tan2sincos,sin2costan,cos2sintan|",
			tan2sincos:"<<tan2sincos(tan(x))>>\nReplaces tan(x) by sin(x)/cos(x) in the argument\n|Also See: sin2costan,cos2sintan,tan2sincos2,tan2cossin2|",
			tan2sincos2:"<<tan2sincos2(tan(x))>>\nReplaces tan(x) by sin(2*x)/(1+cos(2*x)) in the argument\n|Also See: tan2cossin2,tan2sincos,sin2costan,cos2sintan|",
			tanh:"<<tanh(0)>>\nHyperbolic tangent\n|Also See: atanh,hyp2exp|",
			taylor:"<<taylor(sin(x)/x,x,0)>>\nSeries expansion at finite or infinite points (by default x=0, and relative order=5).\n|Also See: series,limit,pade|",
			tchebyshev1:"<<tchebyshev1(3)>>\nReturns the n-th Tchebyshev polynomial of first sort.\n|Also See: tchebyshev2,hermite|",
			tchebyshev2:"<<tchebyshev2(3)>>\nReturns the n-th Tchebyshev polynomial of second sort.\n|Also See: tchebyshev1,hermite|",
			tcoeff:"<<tcoeff(-2*x^3+x^2+7*x)>>\nReturns the coefficient of the term of lowest degree of a polynomial (t=trailing).\n|Also See: lcoeff|",
			tcollect:"<<tcollect(sin(x)+cos(x))>>\nCollect trigonometric expressions\n|Also See: texpand,tlin|",
			texpand:"<<texpand(sin(2*x)+exp(x+y))>>\nExpand transcendental expressions\n|Also See: tcollect,tlin,lin|",
			time:"<<time()>>\nReturns the time to compute a command or from the beginning of the session (from unix epoch 00:00:00 1/1/1970 inside a browser).",
			tlin:"<<tlin(sin(x)^3)>>\nTrigonometric linearization\n|Also See: texpand,lin|",
			tran:"<<tran([[1,2,3],[1,3,6],[2,5,7]])>>\nTransposes a matrix (without conjugation)\n|Also See: conj,trn|",
			translation:"<<translation(1+i,i)>>\ntranslation(B-A,C) (resp translation([a,b,c],C)) is the translated of C in the translation of vector AB (resp [a,b,c]).\n|Also See: rotation,reflection|",
			transpose:"<<tran([[1,2,3],[1,3,6],[2,5,7]])>>\nTransposes a matrix (without conjugation)\n|Also See: conj,trn|",
			trig2exp:"<<trig2exp(sin(x))>>\nReplaces in the argument the trigonometric functions by complex exponentials without linearisation\n|Also See: exp2trig,atrig2ln|",
			trigcos:"<<trigcos(sin(x)^4+sin(x)^2)>>\nSimplifies the argument with the formulas sin(x)^2+cos(x)^2=1 and tan(x)=sin(x)/cos(x) privileging cosine\n|Also See: trigsin,trigtan|",
			trigexpand:"<<trigexpand(sin(3*x))>>\nExpands trigonometric functions.\n|Also See: texpand,lnexpand,expexpand|",
			trigsin:"<<trigsin(cos(x)^4+sin(x)^2)>>\nSimplifies the argument with the formulas sin(x)^2+cos(x)^2=1 and tan(x)=sin(x)/cos(x) privileging sine\n|Also See: trigcos,trigtan|",
			trigtan:"<<trigtan(cos(x)^4+sin(x)^2)>>\nSimplifies the argument with the formulas sin(x)^2+cos(x)^2=1 and tan(x)=sin(x)/cos(x) privileging tangent\n|Also See: trigsin,trigcos|",
			trn:"<<trn([[1,2+i],[3,4]])>>\nReturns the adjoint matrix of A =tran(conj(A))\n|Also See: tran,conj|",
			trunc:"<<trunc(4.3)>>\nTruncates value to n decimal places (by default n=0). Accepts complex numbers.(type=DOM_COMPLEX or DOM_FLOAT).\n|Also See: fPart,floor,iPart|",
			truncate:"<<truncate((x^2+x)^2,3)>>\nTruncates the polynomial P at order n.\n|Also See: series|",
			tsimplify:"<<tsimplify(exp(2*x)+exp(x))>>\nLower the number of non rational variables\n|Also See: simplify|",
			ufactor:"<<ufactor(100_C,1_A)>>\nFactors a unit in a unit object\n|Also See: convert,mksa,usimplify|",
			uniform:"<<uniform(2,5,4)>>\nReturns the density of probability at x of the uniform law on [a,b].\n|Also See: uniform_cdf,uniform_icdf,randvector,ranm|",
			uniform_cdf:"<<uniform_cdf(3.2,5.7,4.4)>>\nReturns the probability that a uniform random variable on [a,b] is lower than x0 (or between x0 and y0).\n|Also See: uniformd,uniform_icdf|",
			uniform_icdf:"<<uniform_icdf(4.2,10.3,0.95)>>\nReturns h such that the probability that a uniform random variable on [a,b] is lower than h is p (0<=p<=1).\n|Also See: uniform_cdf,uniformd|",
			uniformd:"<<uniform(2,5,4)>>\nReturns the density of probability at x of the uniform law on [a,b].\n|Also See: uniform_cdf,uniform_icdf,randvector,ranm|",
			uniformd_cdf:"<<uniform_cdf(3.2,5.7,4.4)>>\nReturns the probability that a uniform random variable on [a,b] is lower than x0 (or between x0 and y0).\n|Also See: uniformd,uniform_icdf|",
			uniformd_icdf:"<<uniform_icdf(4.2,10.3,0.95)>>\nReturns h such that the probability that a uniform random variable on [a,b] is lower than h is p (0<=p<=1).\n|Also See: uniform_cdf,uniformd|",
			union:"<< [1,2,3] union [2,5,6]>>\nunion is an infixed operator to get the union of 2 sets\n|Also See: minus,intersect|",
			unitV:"<<normalize(3+4*i)>>\nReturns the vector divided by its l2norm. It is also an option for plotfiefd.\n|Also See: l2norm|",
			usimplify:"<<usimplify(100_(W*s))>>\nSimplifies a unit in a unit object\n|Also See: convert,mksa,ufactor|",
			valuation:"<<valuation(x^4+x^3)>>\nReturns the valuation (degree of the term of lowest degree) of the polynomial P .\n|Also See: degree,tcoeff|",
			vandermonde:"<<vandermonde([1,2,a])>>\nReturns the Vandermonde matrix=[V^0,V^1,..]\n|Also See: det|",
			variance:"<<variance([3,4,2])>>\nReturns the variance of a list with the second argument as pound or the list of variance of the columns of a matrix.\n|Also See: stddev,mean|",
			version:"<<version()>>\nReturns the number giac version, you are using : giac 0.4.0",
			vpotential:"<<vpotential([2*x*y+3,x^2-4*z,-2*y*z],[x,y,z])>>\nReturns U such as curl(U)=V\n|Also See: curl,potential|",
			weibull:"<<weibull(2.1,1.2,1.3)>>\nReturns the density of probability at x of the Weibull law of parameters k, lambda, theta (by default theta=0).\n|Also See: weibull_cdf,weibull_icdf|",
			weibull_cdf:"<<weibull_cdf(2.1,1.2,1.9)>>\nReturns the probability that a Weibull random variable of parameters k, lambda, theta is lower than x0.\n|Also See: weibulld,weibull_icdf|",
			weibull_icdf:"<<weibull_icdf(4.2,1.3,0.0,0.95)>>\nReturns h such that the probability that a Weibull random variable of parameters k, lambda, theta is lower than h is p (0<=p<=1).\n|Also See: weibull_cdf,weibull|",
			weibulld:"<<weibull(2.1,1.2,1.3)>>\nReturns the density of probability at x of the Weibull law of parameters k, lambda, theta (by default theta=0).\n|Also See: weibull_cdf,weibull_icdf|",
			weibulld_cdf:"<<weibull_cdf(2.1,1.2,1.9)>>\nReturns the probability that a Weibull random variable of parameters k, lambda, theta is lower than x0.\n|Also See: weibulld,weibull_icdf|",
			weibulld_icdf:"<<weibull_icdf(4.2,1.3,0.0,0.95)>>\nReturns h such that the probability that a Weibull random variable of parameters k, lambda, theta is lower than h is p (0<=p<=1).\n|Also See: weibull_cdf,weibull|",
			zeros:"<<zeros(x^2+4)>>\nReturns the zeros (real or complex according to the mode) of the expression (or the matrix where the lines are the solutions of the system : expression1=0,expression2=0...)",
			zip:"<<zip('+',[a,b,c,d], [1,2,3,4])>>\nReturns a list whose j-th entry is f(l1[j],l2[j]): without default value its length is the minimum of the lengths of the two input lists and else the shorter list is padded with the default value.",
			ztrans:"<<ztrans(a^x)>>\nz transform of a sequence\n|Also See: invztrans,laplace,invlaplace|"
		}
	});
}
